<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数值解和优化问题(04)：基于梯度的多元函数优化</title>
    <link href="/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(04)%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%A2%AF%E5%BA%A6%E7%9A%84%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    <url>/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(04)%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%A2%AF%E5%BA%A6%E7%9A%84%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>$\newcommand{}[1]{</p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>数值解和优化问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>极值搜索</tag>
      
      <tag>最速下降法</tag>
      
      <tag>共轭梯度法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值解和优化问题(03)：无导数的优化方法</title>
    <link href="/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(03)%EF%BC%9A%E6%97%A0%E5%AF%BC%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <url>/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(03)%EF%BC%9A%E6%97%A0%E5%AF%BC%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[所谓优化问题, 就是求一个函数的极小值点. 极值与导数有着千丝万缕的联系,但有时我们并不需要求导就能设法求解优化问题,本节给出单元和多元函数优化方法各一例: 黄金分割搜寻法和单纯形方法.<div style="font-family: KaiTi; font-weight: bold;"><pre><code class="hljs">&lt;table frame = &quot;void&quot;&gt;    &lt;tr&gt;        &lt;td width = &quot;50%&quot;&gt;            &lt;img src = &quot;./数值解和优化问题(03)：无导数的优化方法/gold_division.png&quot;&gt;        &lt;/td&gt;        &lt;td&gt;            &lt;img src = &quot;./数值解和优化问题(03)：无导数的优化方法/simplx.png&quot;&gt;        &lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td style = &quot;text-align: center;&quot;&gt;            (摘自刘川《计算物理导论》图 5.1)        &lt;/td&gt;        &lt;td style = &quot;text-align: center;&quot;&gt;            (摘自刘川《计算物理导论》图 5.2)        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre></div><h2 id="黄金分割搜寻法">黄金分割搜寻法</h2><p>假设我们从预估的区域内选择三个点:<spanclass="math inline">\(x_0&lt;x_1&lt;x_3\)</span>. 它们的函数值可以计算.假如这三个函数值中最小者为<span class="math inline">\(f(x_1)\)</span>,只要函数和区域不太奇特, 那么在<span class="math inline">\((x_0,x_3)\)</span>上必然存在极小值点.</p><p>然后我们产生一个点<spanclass="math inline">\(x_2\in(x_1,x_3)\)</span>, 那么分两种情况:</p><ol type="1"><li><span class="math inline">\(f(x_1)&lt;f(x_2)\)</span>, 则<spanclass="math inline">\(f(x_1)\)</span>仍维持最小, 新区间取作<spanclass="math inline">\((x_0,x_2)\)</span>, <spanclass="math inline">\(x_1\)</span>留作比较;</li><li><span class="math inline">\(f(x_1)&gt;f(x_2)\)</span>, 则<spanclass="math inline">\(f(x_2)\)</span>成为新的最小, 新区间取作<spanclass="math inline">\((x_1,x_3)\)</span>, <spanclass="math inline">\(x_2\)</span>留作比较.</li></ol><p>那么如何得到<span class="math inline">\(x_2\)</span>呢? 设定三个长度:<span class="math display">\[a:=x_1 - x_0\ ,\qquad b = x_2 - x_1\ ,\qquad c := x_3-x_1\]</span> 两种情况下的新区间总长度分别是<spanclass="math inline">\(a+b\)</span>和<spanclass="math inline">\(c\)</span>, 我们希望两者一致. 另外,我们还希望两种新区间有相似性, 即各个点比例一致. 那么 <spanclass="math display">\[b = c - a\\\frac{b}{c} = \frac{a}{a + c}\]</span> 解得 <span class="math display">\[c = \frac{\sqrt{5}+1}{2}a\ ,\qquad b = \frac{\sqrt{5}-1}{2}a\]</span> 这恰好是黄金分割比, 因此这种方法称作<strong>黄金分割搜寻法</strong>.</p><h3 id="方法总结">方法总结</h3><ol type="1"><li><p>给定区间两端点<span class="math inline">\(x_0&lt;x_3\)</span>​,由此求出两值为 <span class="math display">\[x_1 = \frac{\sqrt{5}-1}{2}x_0 + \frac{3-\sqrt{5}}{2}x_3\\x_2 = \frac{3-\sqrt{5}}{2}x_0 + \frac{\sqrt{5}-1}{2}x_3\]</span></p></li><li><p>研究结束条件<spanclass="math inline">\(g(x_0,x_1,x_2,x_3)\le\epsilon\)</span>是否满足,满足则终止, 不满足则来到步骤3.</p></li><li><p>比较<span class="math inline">\(f(x_1)\)</span>和<spanclass="math inline">\(f(x_2)\)</span>, 如果前者更小, 来到步骤4.a;如果前者更大, 来到步骤4.b.</p></li><li><p>根据上一步的情况选择其一:</p><ol type="1"><li>将<span class="math inline">\(x_0,x_1,x_2\)</span>作为新的<spanclass="math inline">\(x_0,x_2,x_3\)</span>, 新的<spanclass="math inline">\(x_1\)</span>按照步骤1计算, 进入步骤2.</li><li>将<span class="math inline">\(x_1,x_2,x_3\)</span>作为新的<spanclass="math inline">\(x_0, x_1,x_3\)</span>, 新的<spanclass="math inline">\(x_2\)</span>按照步骤1计算, 进入步骤2.</li></ol></li></ol><h2 id="单纯形方法">单纯形方法</h2><h3 id="前置知识">前置知识</h3><p>单纯形方法是适用于多元函数的无导数优化方法, 也叫 <strong>Nelder-Mead方法</strong>. 要使用这种方法, 就要先定义所谓的<strong>单纯形</strong>:</p><blockquote><p>考虑<span class="math inline">\(n\)</span>维空间中完全联通的<spanclass="math inline">\(n+1\)</span>个不共超平面的点, 任选<spanclass="math inline">\(n\)</span>个点即共超平面. 按照<spanclass="math inline">\(C_{n+1}^n\)</span>组合出的<spanclass="math inline">\(n+1\)</span>个超平面围成的几何体, 称作<spanclass="math inline">\(n\)</span>维空间的单纯形.</p></blockquote><p>举例说明即是: <span class="math inline">\(1\)</span>维的线段, <spanclass="math inline">\(2\)</span>维的三角形, <spanclass="math inline">\(3\)</span>维的四面体......</p><p>构造单纯形的方法非常简单, 给定一个出发点<spanclass="math inline">\(\vec{x}^{(0)}\)</span>, 构造另外<spanclass="math inline">\(n\)</span>个点</p><ul><li><strong>最佳点</strong>: 函数值最小的点, 记作<spanclass="math inline">\(\vec{x}^{(m)}\)</span>.</li><li><strong>最差点</strong>: 函数值最大的点, 记作<spanclass="math inline">\(\vec{x}^{(M)}\)</span>.</li><li><strong>次差点</strong>: 函数值次大的点, 记作<spanclass="math inline">\(\vec{x}^{(\mu)}\)</span>.</li></ul><p>对于每个点定义它的<strong>对偶中心点</strong>: <spanclass="math display">\[\vec{x}_c^{(k)}=\frac{1}{n}\sum_{j=0,j\ne k}^n\vec{x}^{(j)}\]</span></p><h3 id="算法步骤">算法步骤</h3><ol type="1"><li><p>对给定的起始点确定其它<spanclass="math inline">\(n\)</span>个点和<spanclass="math inline">\(\vec{x}^{(M)},\vec{x}^{(m)},\vec{x}^{(\mu)}\)</span>.</p></li><li><p><strong>反射步骤</strong></p><ol type="1"><li><p>求出<spanclass="math inline">\(n+1\)</span>个点的<strong>样本方差</strong><spanclass="math inline">\(s^2\)</span>并与规定的误差<spanclass="math inline">\(\epsilon\)</span>​​比较, 如果更低就停止迭代,否则进行反射, 具体地: <span class="math display">\[\vec{x}_r=(\alpha+1)\vec{x}_c^{(M)}-\alpha\vec{x}^{(M)}\]</span> 其中<spanclass="math inline">\(\alpha&gt;0\)</span>是可调的反射系数.</p></li><li><p>判断函数值, 如果满足<spanclass="math inline">\(f(\vec{x}^{(m)})&lt;f(\vec{x}_r)&lt;f(\vec{x}^{(\mu)})\)</span>,则用<span class="math inline">\(\vec{x}_r\)</span>替代<spanclass="math inline">\(\vec{x}^{(M)}\)</span>(尽管还有比它更差的点)并回到步骤2.a;如果<spanclass="math inline">\(f(\vec{x}_r)&lt;f(\vec{x}^{(m)})\)</span>,即它成了最佳的点, 进入步骤3; 如果<spanclass="math inline">\(f(\vec{x}_r)&gt;f(\vec{x}^{(\mu)})\)</span>,进入步骤4.</p></li></ol></li><li><p><strong>扩展步骤</strong></p><ol type="1"><li><p>定义新的扩展点<span class="math inline">\(\vec{x}_e\)</span>​​,使得 <span class="math display">\[\vec{x}_e=\beta\vec{x}_r+(1-\beta)\vec{x}_c^{(M)}\]</span> 其中<spanclass="math inline">\(\beta&gt;1\)</span>是一个可调的扩展参数.</p></li><li><p>判断函数值, 如果<spanclass="math inline">\(f(\vec{x}_e)&lt;f(\vec{x}^{(m)})\)</span>,则用<span class="math inline">\(\vec{x}_e\)</span>替代<spanclass="math inline">\(\vec{x}^{(M)}\)</span>; 否则用<spanclass="math inline">\(\vec{x}_r\)</span>替代<spanclass="math inline">\(\vec{x}^{(M)}\)</span>.不管用谁替代都回到步骤2.</p></li></ol></li><li><p><strong>收缩步骤</strong></p><ol type="1"><li><p>判断函数值. 如果<spanclass="math inline">\(f(\vec{x}_r)&lt;f(\vec{x}_c^{(M)})\)</span>,则极小值点位于<span class="math inline">\(\vec{x}_r\)</span>和<spanclass="math inline">\(\vec{x}_c^{(M)}\)</span>​之间, 收缩点选为 <spanclass="math display">\[\vec{x}_{con}=\gamma\vec{x}_r+(1-\gamma)\vec{x}_c^{(M)}\,\qquad\gamma\in(0,1)\]</span> 如果<span class="math inline">\(f(\vec{x}_r)\gef(\vec{x}_c^{(M)})\)</span>, 则极小值点位于<spanclass="math inline">\(\vec{x}^{(M)}\)</span>和<spanclass="math inline">\(\vec{x}_c^{(M)}\)</span>之间, 收缩点选为 <spanclass="math display">\[\vec{x}_{con}=\gamma\vec{x}^{(M)}+(1-\gamma)\vec{x}_c^{(M)}\]</span></p></li><li><p>判断函数值, 如果<spanclass="math inline">\(f(\vec{x}_{con})&lt;f(\vec{x}^{(M)})\)</span>且<spanclass="math inline">\(f(\vec{x}_{con})&lt;f(\vec{x}_r)\)</span>, 用<spanclass="math inline">\(\vec{x}_{con}\)</span>替代<spanclass="math inline">\(\vec{x}^{(M)}\)</span>回到步骤2; 否则,回到步骤1将每个<span class="math inline">\(h_k\)</span>都减半,重新构造各个点.</p></li></ol></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><span class="math display">[<sup>{(i)}=</sup>{(0)}+h_i_i ,i = 1, 2, , n ]</span> <spanclass="math inline">(n+1)</span>个点中, 有三个点尤其应该关注:<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:1" class="footnote-text"><span>这里的构造只需要线性无关,不需要正交性, 斜交是完全允许的.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>数值解和优化问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>极值搜索</tag>
      
      <tag>黄金分割搜寻法</tag>
      
      <tag>单纯形方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值解和优化问题(02)：Aitken 算法, Steffensen 算法</title>
    <link href="/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(02)%EF%BC%9AAitken%20%E7%AE%97%E6%B3%95,%20Steffensen%20%E7%AE%97%E6%B3%95/"/>
    <url>/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(02)%EF%BC%9AAitken%20%E7%AE%97%E6%B3%95,%20Steffensen%20%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="aitken---δ²-加速算法">Aitken - Δ² 加速算法</h2><p>如果我们已经有了一个收敛于函数<spanclass="math inline">\(f(x)\)</span>的根<spanclass="math inline">\(\xi\)</span>的一个迭代序列<spanclass="math inline">\(\{x_i\}\)</span>,希望构造一个收敛速度更快的迭代序列<spanclass="math inline">\(\{x_i&#39;\}\)</span>. 为此, 引入新参数<spanclass="math inline">\(k\)</span>: <span class="math display">\[k:=\frac{x_{i+1}-\xi}{x_i-\xi}\]</span> 假定<span class="math inline">\(k\)</span>和<spanclass="math inline">\(\xi\)</span>是不依赖于<spanclass="math inline">\(i\)</span>的常数(基本不可能),那么它们可以用相邻的三个元素表示出来: <span class="math display">\[\begin{aligned}k &amp;= \frac{x_{i+2}-x_{i+1}}{x_{i+1}-x_i}\\\xi &amp;= \frac{x_ix_{i+2}-x_{i+1}^2}{x_{i+2}-2x_{i+1}+x_i}\end{aligned}\]</span> 引入差分算符<span class="math inline">\(\Delta x_i :=x_{i+1}-x_i\)</span>, 则 <span class="math display">\[\xi=x_i-\displaystyle\frac{(\Delta x_i)^2}{\Delta^2 x_i}\]</span> 直接拿它构造新序列, 得到 <span class="math display">\[\boxed{x_i&#39;=x_i-\frac{(\Delta x_i)^2}{\Delta^2x_i}=x_i-\frac{(x_{i+1}-x_i)^2}{x_{i+2}-2x_{i+1}+x_i}}\]</span> 这就是所谓的 <strong>Aitken-Δ² 加速算法</strong>,按照这个算法得到的新序列必然收敛得更快.</p><h2 id="steffensen-算法">Steffensen 算法</h2><p>我们使用迭代函数的形式描述迭代过程 <span class="math display">\[x_{i+1}=\Phi(x_i)\ ;\qquad\xi=\Phi(\xi)\]</span> 相应地, Aitken 算法的形式可以改写为 <spanclass="math display">\[\begin{aligned}x_i&#39;&amp;=x_i-\frac{(\Phi(x_i)-x_i)^2}{\Phi[\Phi(x_i)]-2\Phi(x_i)+x_i}\\&amp;=\frac{x_i\Phi[\Phi(x_i)]-[\Phi(x_i)]^2}{\Phi[\Phi(x_i)]-2\Phi(x_i)+x_i}\end{aligned}\]</span> 进一步引入新函数 <span class="math display">\[\Psi(x):=\frac{x\Phi[\Phi(x)]-[\Phi(x)]^2}{\Phi[\Phi(x)]-2\Phi(x)+x}\\x&#39;_i=\Psi(x_i)\]</span> 我们已知<span class="math inline">\(x_i&#39;\)</span>比<spanclass="math inline">\(x_i\)</span>更快, 不如把它定义成所谓的<spanclass="math inline">\(x_{i+1}\)</span>, 则新迭代方法告诉我们 <spanclass="math display">\[x_{i+1}=\Psi(x_i)\]</span></p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>数值解和优化问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>数值求解</tag>
      
      <tag>Aitken 算法</tag>
      
      <tag>Steffensen 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值解和优化问题(01)：对分法, 切线法和割线法</title>
    <link href="/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(01)%EF%BC%9A%E5%AF%B9%E5%88%86%E6%B3%95,%20%E5%88%87%E7%BA%BF%E6%B3%95%E5%92%8C%E5%89%B2%E7%BA%BF%E6%B3%95/"/>
    <url>/posts/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98(01)%EF%BC%9A%E5%AF%B9%E5%88%86%E6%B3%95,%20%E5%88%87%E7%BA%BF%E6%B3%95%E5%92%8C%E5%89%B2%E7%BA%BF%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本章介绍两类问题, 数值解问题(即解方程)和优化问题(即查找极小值点),它们一定程度上很像. <strong>我们默认本章的讨论对象,即某些一元或多元函数, 在讨论的区间上具有连续导数.</strong>我们不使用特定的公式进行近似估计,而是从一个初始点开始进行迭代逼近最优解. 本节就要介绍三类迭代求根法.</p><h2 id="对分法">对分法</h2><p>给定一个函数<span class="math inline">\(f(x)\)</span>,如果我们已知它在闭区间<spanclass="math inline">\([a,b]\)</span>上连续并且满足<spanclass="math inline">\(f(a)f(b)&lt;0\)</span>, 那么最直接的求根方法就是<strong>对分法</strong>, 也称 <strong>二分法</strong>.</p><p>对分法的流程十分简单, 每次我们将区间二分, 计算中间位置<spanclass="math inline">\(c=\displaystyle\frac{a+b}{2}\)</span>的函数值<spanclass="math inline">\(f(c)\)</span>, 如果它和<spanclass="math inline">\(f(a)\)</span>或<spanclass="math inline">\(f(b)\)</span>中的某个值异号,则可以知道两个子区间中存在根的区间, 如是递归,就能锁定根附近的一个小区间.</p><p>对分法的优势十分明显, 如果<spanclass="math inline">\(f(x)\)</span>的导数计算不便(尽管存在),那么对分法作为一种只涉及函数值计算的方法是很便利的; 另外,很多时候求根过程本身并没有多么费时, 或者不追求收敛速度,那么对分法也是较好的选择, 它的误差随迭代次数而指数衰减.</p><h2 id="newton-raphson-法">Newton-Raphson 法</h2><p>我们同样考虑一个一元函数<spanclass="math inline">\(f(x)\)</span>的根. 假设它有一根<spanclass="math inline">\(\xi\)</span>, 并且搜索域足够光滑并处在<spanclass="math inline">\(\xi\)</span>附近, 使得函数<spanclass="math inline">\(f(x)\)</span>可以作 Taylor 展开: <spanclass="math display">\[f(\xi)=0\ ;\qquad f(\xi)=f(x_0)+f&#39;(x_0)(\xi-x_0)+o(\xi-x_o)\]</span> 抛弃高阶无穷小, 也就是作线性近似,有 <spanclass="math display">\[\begin{aligned}&amp;\boxed{\xi\approx x_0-\frac{f(x_0)}{f&#39;(x_0)}}\\\text{或者写作 }&amp;\boxed{x_{i+1}=x_i-\frac{f(x_i)}{f&#39;(x_i)}}\end{aligned}\]</span> 这个表达式就是所谓的 <strong>Newton-Raphson</strong> 法,将求得的<span class="math inline">\(\xi\)</span>值作为下一轮的<spanclass="math inline">\(x_0\)</span>进行迭代, 直到误差收敛到想要的范围,因为涉及且仅涉及一阶导数计算, 又称为 <strong>切线法</strong>.</p><p>切线法的优势在于更快的收敛速度. 令<spanclass="math inline">\(\epsilon_i=x_i-\xi\)</span>, 有 <spanclass="math display">\[\epsilon_{i+1}=\epsilon_{i}-\frac{f(x_i)}{f&#39;(x_i)}\]</span> 考虑到后一项的 Taylor 近似公式 <span class="math display">\[\begin{aligned}f(x_i)&amp;=f(\xi)+f&#39;(\xi)\cdot\epsilon_i+o(\epsilon_i)\approxf&#39;(\xi)\cdot\epsilon_i\\f&#39;(x_i)&amp;=f&#39;(\xi)+f&#39;&#39;(\xi)\cdot\epsilon_i +o(\epsilon_i)\approx f&#39;(\xi)+f&#39;&#39;(\xi)\cdot\epsilon_i\end{aligned}\]</span> 得到 <span class="math display">\[\epsilon_{i+1}\sim\epsilon_i^2\]</span> Newton 法也并非没有缺陷. 迭代公式依赖于函数导数,如果在搜索域内同时存在极值, 使得<spanclass="math inline">\(f&#39;(x_i)\)</span>很小,那么可能造成某一步的位移很大, 误差急剧变大, 慢慢回来是很困难的,极值点(驻点)对 Newton 法干扰很大.</p><h3 id="高阶推广">高阶推广</h3><p>我们可以作抛物近似, 它给出一个比较复杂的公式: <spanclass="math display">\[x_{i+1}=x_i-\frac{f(x_i)\pm\sqrt{f&#39;(x_i)^2-2f(x_i)f&#39;&#39;(x_i)}}{f&#39;&#39;(x_i)}\]</span> 更高阶的推广过于复杂, 而且导数计算不便, 故而不用,这个二阶推广使用也较少.</p><h3 id="多元推广">多元推广</h3><p>我们还可以把一元方程推广为多元的方程组. 给定线性独立的方程组 <spanclass="math display">\[f_k(\vec{x})=0\ ,\qquad k=1,2,\cdots,n\]</span> 其中<spanclass="math inline">\(\vec{x}=(x^{(1)},x^{(2)},\cdots,x^{(n)})\)</span>.同样地, 进行 Taylor 展开 <span class="math display">\[\vec{f}(\vec{\xi})=\bold{0}\ ;\qquad\vec{f}(\vec{\xi})=\vec{f}(\vec{x}_0)+\grad\vec{f}(\vec{x}_0)\cdot(\vec{\xi}-\vec{x}_0)+o(\abs{\vec{\xi}-\vec{x}_0})\]</span> 其中<span class="math inline">\(\grad\vec{f}(\vec{x}_0)\)</span>自然是个张量, 并且满足 <spanclass="math display">\[[\grad \vec{f}(\vec{x}_0)]_{jk}=\frac{\partial f_j(\vec{x})}{\partialx^{(k)}}\]</span> 就是 Jacobi 矩阵.只要它在搜索域上可逆<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote">&lt;spanclass="hint--top hint--rounded" aria-label="等价于 Jacobi 行列式非零,这实际上就是"线性独立"想表达的意思"&gt;[1]</span></a></sup>, 就有 <spanclass="math display">\[\vec{x}_{i+1}=\vec{x}_i-[\grad\vec{f}(\vec{x}_i)]^{-1}\cdot\vec{f}(\vec{x}_i)\]</span> 当维数<span class="math inline">\(n=1\)</span>​时,退化为一元函数的切线法.</p><h2 id="割线法">割线法</h2><p>割线法和切线法类似, 它是导数不太好算时的平替, 我们用割线代替切线:<span class="math display">\[f&#39;(x_i)\approx\frac{f(x_i)-f(x_{i-1})}{x_i-x_{i-1}}\]</span> 那么割线法的迭代公式为 <span class="math display">\[x_{i+1}=x_i-\frac{(x_i-x_{i-1})f(x_i)}{f(x_i)-f(x_{i-1})}\]</span> 这实际上意味着<spanclass="math inline">\(x\)</span>能够具有下标<spanclass="math inline">\(-1\)</span>, 也就是说我们要给定两个初始位置<spanclass="math inline">\(x_{-1}\)</span>和<spanclass="math inline">\(x_0\)</span>. 如果它们之间存在驻点,割线法同样会失败; 只要正确运用割线法, 其收敛速度略慢于切线法,但明显快于对分法.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>等价于 Jacobi 行列式非零,这实际上就是"线性独立"想表达的意思<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>数值解和优化问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>数值求解</tag>
      
      <tag>对分法</tag>
      
      <tag>Newton-Raphson 法</tag>
      
      <tag>割线法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微积分数值计算(02)：外推积分法, Gauss 积分法</title>
    <link href="/posts/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(02)%EF%BC%9A%E5%A4%96%E6%8E%A8%E7%A7%AF%E5%88%86%E6%B3%95,%20Gauss%20%E7%A7%AF%E5%88%86%E6%B3%95/"/>
    <url>/posts/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(02)%EF%BC%9A%E5%A4%96%E6%8E%A8%E7%A7%AF%E5%88%86%E6%B3%95,%20Gauss%20%E7%A7%AF%E5%88%86%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="外推积分法">外推积分法</h2><p>所谓 <strong>外推积分法</strong>, 就是将积分区间大小为<spanclass="math inline">\(h\)</span>的数值积分值, 按照一定的形式外推至<spanclass="math inline">\(h\to0\)</span>的情况.比如我们如果考虑积分值满足如下表达式 <span class="math display">\[I(h)=\tau_0+\tau_1h^2+\cdots+\tau_mh^{2m}+\cdots\]</span> 那么我们就可以通过递推计算获得关于<spanclass="math inline">\(h\)</span>的某一阶的数值积分.</p><p>外推积分法的基础是 <strong>Euler-Maclaurin 公式</strong> <spanclass="math display">\[T(h)-\int_a^bf(t)dt=\sum_{k=1}^m\frac{B_{2k}h^{2k}}{(2k)!}[f^{(2k-1)}(a)-f^{(2k-1)}(b)]-\frac{B_{2m+2}h^{2m+2}}{(2m+2)!}f^{(2m+2)}(\xi)\,\ \xi\in[a,b]\]</span> 其中, <span class="math inline">\(T(h)\)</span>和<spanclass="math inline">\(\displaystyle\int_a^bf(t)dt\)</span>分别是微元法给出的积分值和真实的积分值.<span class="math inline">\(B_{2k}\)</span>是所谓的 Bernoulli 数, 即<span class="math display">\[\frac{z}{e^z-1}=\sum_{n=0}^\infty\frac{B_n}{n!}z^n\]</span> 根据这个公式, <spanclass="math inline">\(T(h)\)</span>可以写为形如 <spanclass="math display">\[T(h)=\tau_0+\tau_1h^2+\cdots+\tau_mh^{2m}+o(h^{2m})\]</span> 的多项式. 因此取多个<spanclass="math inline">\(h\)</span>并计算<spanclass="math inline">\(T(h)\)</span>​的值, 由此进行多项式插值,得到的插值函数的零阶项, 便是对积分的数值计算.</p><h3 id="neville-形式">Neville 形式</h3><p>我们可以模拟 Neville 插值法进行外推. 首先, 选取一个整数序列<spanclass="math inline">\(\{N_i\}\)</span>来调整<spanclass="math inline">\(h\)</span>, 即<spanclass="math inline">\(\{h_i\}=\{\displaystyle\frac{b-a}{N_i}\}\)</span>.为了方便, 将<span class="math inline">\(T(h_k)\)</span>记作<spanclass="math inline">\(T_{k0}\)</span>. 而内插的<spanclass="math inline">\(m\)</span>阶多项式记为<spanclass="math inline">\(P_{mm}(h)\)</span>, 它显然满足 <spanclass="math display">\[P_{mm}(h_k)=T_{k0}\]</span> 假设<span class="math inline">\(P_{jk}(h)\)</span>是关于<spanclass="math inline">\(h^2\)</span>的<spanclass="math inline">\(k\)</span>次插值函数, 支撑点为<spanclass="math inline">\(\{h_{j-k},\cdots,h_{j}\}\)</span>. 模仿 Neville迭代有 <span class="math display">\[P_{jk}=\frac{\displaystyle\frac{h_{j-k}^2}{h_j^2}P_{j,k-1}-P_{j-1,k-1}}{\displaystyle\frac{h_{j-k}^2}{h_j^2}-1}\]</span> 我们可以这么表示迭代过程: <span class="math display">\[\begin{pmatrix}T_{00} &amp;&amp; T_{10} &amp;&amp; T_{20} &amp;&amp; \cdots &amp;&amp;T_{m0}\newline&amp; \searrow &amp; \downarrow &amp; \searrow &amp; \downarrow&amp;\searrow &amp; \cdots &amp; \searrow &amp; \downarrow\newline&amp;&amp;P_{11} &amp;&amp; P_{21} &amp;&amp; \cdots &amp;&amp; P_{m1}\newline&amp;&amp;&amp; \searrow &amp; \downarrow &amp;\searrow &amp; \cdots&amp; \searrow &amp; \downarrow\newline&amp;&amp;&amp;&amp; P_{22} &amp;&amp; \cdots &amp;&amp; P_{m2}\newline&amp;&amp;&amp;&amp;&amp;\searrow &amp; \cdots &amp; \searrow &amp;\downarrow\newline&amp;&amp;&amp;&amp;&amp;&amp; \cdots &amp;&amp; \cdots\newline&amp;&amp;&amp;&amp;&amp;&amp;&amp; \searrow &amp; \downarrow\newline&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;P_{mm}\end{pmatrix}\]</span></p><h2 id="gauss-积分法">Gauss 积分法</h2><p>如果一个函数可以利用正交多项式的展开进行近似,我们就可以利用这个展开计算定积分.</p><p>现在先给定积分区间<spanclass="math inline">\([a,b]\)</span>以及一个内积空间<spanclass="math inline">\(\mathbb{V}\)</span>, 权函数为<spanclass="math inline">\(\omega\)</span>, 主要研究对象为函数<spanclass="math inline">\(f\in\mathbb{V}\)</span>.内积空间上全体最高次系数为<span class="math inline">\(1\)</span>的<spanclass="math inline">\(j\)</span>次多项式, 构成了内积空间<spanclass="math inline">\(\mathbb{V}\)</span>的真子集, 记作<spanclass="math inline">\(\mathbb{P}_j\)</span>.</p><p>我们不加证明地指出一个定理系统:</p><h3 id="正交多项式与-chebyshev-系统">正交多项式与 Chebyshev 系统</h3><ol type="1"><li><p><strong>正交基的存在性</strong></p><p>存在一系列多项式<span class="math inline">\(p_k\in\mathbb{P}_k\ ,\k=0,1,\cdots\)</span>​​, 满足正交关系 <span class="math display">\[(p_j,p_k)=0\ ,\ j\ne k\]</span></p></li><li><p><strong>Gram-Schimidt 正交化方法</strong></p><p>这个正交基可以由下列递推关系给出 <span class="math display">\[p_{k+1}(x)=(x-\alpha_{k+1})p_k(x)-\beta_{k+1}^2p_{k-1}(x)\newlinep_0(x)\equiv1\ ,\ \text{规定 }p_{-1}(x)\equiv0\]</span> 其中, 参数<span class="math inline">\(\alpha\)</span>和<spanclass="math inline">\(\beta\)</span>分别为 <span class="math display">\[\alpha_{k+1}=\frac{(xp_{k+1},p_{k+1})}{(p_{k+1},p_{k+1})}\newline\beta_{k+1}^2=\frac{(p_k,p_k)}{(p_{k-1},p_{k-1})}\newline(\text{规定 }\beta^2_1=0)\]</span></p></li><li><p><strong>零点的性质</strong></p><p><span class="math inline">\(p_k(x)\)</span>的<spanclass="math inline">\(k\)</span>个零点都是单重实根, 并且都在<spanclass="math inline">\([a,b]\)</span>上</p></li><li><p><strong>Haar 条件</strong></p><p>给定<span class="math inline">\(n\)</span>个两两不同的自变量<spanclass="math inline">\(\{t_i\}_{0\sim n-1}\)</span>, 下列系数矩阵是可逆的<span class="math display">\[\begin{aligned}\boldsymbol{A}&amp;=\begin{pmatrix}p_0(t_0) &amp; \cdots &amp; p_0(t_{n-1})\newline\vdots &amp; \cdots &amp; \vdots\newlinep_{n-1}(t_0) &amp; \cdots &amp; p_{n-1}(t_{n-1})\end{pmatrix}\newline\newline(&amp;\text{或者 }a_{jk}=p_{j-1}(t_{k-1}))\end{aligned}\]</span></p></li></ol><p>Haar 条件意味着什么呢? 当我们计算一个插值问题时, 插值函数为 <spanclass="math display">\[P_{N}(x)=\sum_{k=0}^{N-1}c_kp_k(x)\]</span> 支撑点为<span class="math inline">\(\{(t_i,f_i)\}_{0\simN-1}\)</span>, 因此它满足一个线性方程组 <span class="math display">\[\sum_{k=0}^{N-1}p_k(t_{j})c_k=f_j\]</span> 即 <span class="math display">\[\begin{pmatrix}c_0 &amp; c_1 &amp; \cdots &amp;c_{N-1}\end{pmatrix}\cdot\boldsymbol{A}=\begin{pmatrix}f_0 &amp; f_1 &amp; \cdots &amp; f_{N-1}\end{pmatrix}\]</span> 它有唯一解的条件是<spanclass="math inline">\(\boldsymbol{A}\)</span>具有full rank,也就要求可逆, 即所谓的 Haar 条件保证了插值问题解的唯一性.满足以上几个条件的一系列多项式, 称之为 <strong>Chebyshev系统</strong>.</p><h3 id="gauss-点-权重因子">Gauss 点, 权重因子</h3><p>我们把 Gram-Schimidt 正交化方法中的参数排成一个三对角矩阵 <spanclass="math display">\[\boldsymbol{J}_n=\begin{pmatrix}\alpha_1 &amp; \beta_2 &amp;\newline\beta_2 &amp; \alpha_2 &amp; \ddots\newline&amp; \ddots &amp; \ddots &amp; \ddots\newline&amp; &amp; \ddots &amp;\alpha_{n-1} &amp; \beta_n\newline&amp; &amp; &amp; \beta_n &amp; \alpha_n\end{pmatrix}\]</span> 定义函数 <span class="math display">\[p_n(x)=\det(x\boldsymbol{I}_n-\boldsymbol{J}_n)\]</span> 明显有 <span class="math display">\[p_n(x)=(x-\alpha_n)p_{n-1}(x)-\beta_n^2p_{n-2}(x)\]</span> 这明显就是之前定义的多项式基<spanclass="math inline">\(\{p_i(x)\}\)</span>, 而<spanclass="math inline">\(\boldsymbol{J}_n\)</span>的本征值, 恰好是<spanclass="math inline">\(p_n(x)\)</span>的<spanclass="math inline">\(n\)</span>个零点.</p><p>假设我们选择了这<spanclass="math inline">\(n\)</span>个零点作为积分的 <strong>Gauss点</strong>: <span class="math display">\[I[f]\approx\sum_{j=1}^nw_jf(x_j)\]</span> <span class="math inline">\(w_j\)</span>称为<strong>权重因子</strong>, 为了保证支撑点都有效, 并且不出现正负相消,它们应该都为正. 考虑在正交多项式基上展开<spanclass="math inline">\(\displaystylef(x)\approx\sum_{k=0}^{n-1}c_kp_k(x)\)</span>, 近似替代<spanclass="math inline">\(f\)</span>, 我们希望三个约等号联系起一个等号:<span class="math display">\[\sum_{k=0}^{n-1}c_k\int_a^b\omega(x)p_k(x)dx=\sum_{k=0}^{n-1}c_k\sum_{j=1}^nw_jp_k(x_j)\]</span> 观察左边, 不难发现其实只有<spanclass="math inline">\(k=0\)</span>项存在, 因为积分相当于<spanclass="math inline">\(p_0\equiv1\)</span>和<spanclass="math inline">\(p_k\)</span>的内积.为了得到普适的式子(指对于任何<spanclass="math inline">\(\{c_i\}\)</span>总能取等或者近似取等), 有 <spanclass="math display">\[\sum_{j=1}^nw_jp_k(x_j)=\begin{cases}\begin{aligned}\displaystyle(p_0,p_0)\qquad k=0&amp;\newline\newline\displaystyle0\qquad \text{otherwise}&amp;\end{aligned}\end{cases}\]</span></p><h3 id="gauss-积分法总结">Gauss 积分法总结</h3><p>对于一个函数<spanclass="math inline">\(f\in\mathbb{C}^{2n}[a,b]\)</span>和一个正交多项式基<spanclass="math inline">\(\{p_i\}\)</span>, 取<spanclass="math inline">\(p_n\)</span>的零点<spanclass="math inline">\(\{x_i\}_{1\sim n}\)</span>为 Gauss 点, 线性方程组<span class="math display">\[\sum_{j=1}^np_k(x_j)w_j=\begin{cases}\begin{aligned}\displaystyle(p_0,p_0)\qquad k=0&amp;\newline\newline\displaystyle0\qquad \text{otherwise}&amp;\end{aligned}\end{cases}\]</span> 的解<span class="math inline">\(\vec{w}\)</span>为权重因子,则可以用如下公式近似替代定积分: <span class="math display">\[\int_a^b\omega(x)f(x)dx=\sum_{j=1}^nw_jf(x_j)+\frac{f^{(2n)}(\xi)}{(2n)!}(p_n,p_n)\]</span> 后一项表示误差, <spanclass="math inline">\(\xi\)</span>是<spanclass="math inline">\([a,b]\)</span>上的某个数.</p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>微积分数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>数值微积分</tag>
      
      <tag>外推积分法</tag>
      
      <tag>Gauss 积分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微积分数值计算(01)：简单的微积分方法</title>
    <link href="/posts/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(01)%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E5%BE%AE%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95/"/>
    <url>/posts/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(01)%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E5%BE%AE%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本节给出一些相当trivial的微积分的数值计算方法.</p><h2 id="数值微分">数值微分</h2><h3 id="差分法">差分法</h3><p>从定义出发即可, 与数学不同的是, 我们无法做到计算"无穷小",它压根不是个数, 只能尽量给出较小的差分长度: <spanclass="math display">\[f&#39;(x)\approx\frac{f(x+h)-f(x)}{h}\]</span> 对<span class="math inline">\(f(x)\)</span>作展开, 即<spanclass="math inline">\(f(x+h)=f(x)+c_1h+c_2h^2+\cdots\)</span>, 得到<span class="math display">\[f&#39;(x)\approx c_1+c_2h+o(h)\]</span> 这给出<span class="math inline">\(\sim h\)</span>的误差.不难想到一个改进方案 <span class="math display">\[f&#39;(x)\approx\frac{f(x+h)-f(x-h)}{2h}\]</span> 同样代入展开式, 得到 <span class="math display">\[f&#39;(x)\approx c_1+c_3h^2+o(h^2)\]</span> 它给出<span class="math inline">\(\sim h^2\)</span>的误差.</p><h3 id="基函数法">基函数法</h3><p>当然还有相对复杂的计算方法, 比如, 如果已经有<spanclass="math inline">\(f(x)\)</span>​的 Chebyshev 展开 <spanclass="math display">\[f(x)\approx\sum_{k=0}^Nc_kT_k(x)\]</span> 那么它的导数可以表示为 <span class="math display">\[f&#39;(x)\approx\sum_{k=0}^Nc_k&#39;T_k(x)\]</span> 其中, <spanclass="math inline">\(c_{k-1}&#39;=c_{k+1}&#39;+2kc_k\)</span>,并且<span class="math inline">\(c_{N}&#39;=c_{N-1}&#39;=0\)</span>.</p><h2 id="数值积分的-newton-cortes-方法">数值积分的 Newton-Cortes方法</h2><h3 id="微元法">微元法</h3><p>微元法实际上不是这里的 Newton - Cortes 方法,它只是从定积分定义出发的方案. 考虑一个函数<spanclass="math inline">\(f(x)\)</span>在闭区间<spanclass="math inline">\([a,b]\)</span>上可积, 它的定积分为 <spanclass="math display">\[\int_a^bf(x)dx=\lim_{\lambda\to0^+}\sum_{l=1}^Nf(\xi_l)\Delta x_l\]</span> 其中将区间<spanclass="math inline">\([a,b]\)</span>分割为<spanclass="math inline">\(N\)</span>个子区间<spanclass="math inline">\((x_{l-1},x_l)\ ,\ l=1,2,\cdots,N\)</span>, <spanclass="math inline">\(\Delta x_l=x_l-x_{l-1}\)</span>, <spanclass="math inline">\(\xi_l\in(x_{l-1},x_l)\)</span>. 而<spanclass="math inline">\(\lambda\)</span>则是最大的区间长度, 即 <spanclass="math display">\[\lambda=\max\{\Delta x_1,\Delta x_2,\cdots,\Delta x_N\}\]</span> 和差分法类似, 我们实现不了<spanclass="math inline">\(\lambda\to0^+(N\to\infty)\)</span>的无穷细致,那就足够细致. 取分割方案为<span class="math inline">\(N\)</span>等分, 即<span class="math display">\[x_k=a+\frac{b-a}{N}\times k\newline\Delta x_l=\lambda=\frac{b-a}{N}\]</span> 并对每一个区间使用梯形法则, 得到 <span class="math display">\[\int_a^bf(x)dx\approx\frac{b-a}{N}\times(\frac{f(x_0)}{2}+\sum_{j=1}^{N-1}f(x_j)+\frac{f(x_N)}{2})\]</span></p><h3 id="newton-cortes-方法">Newton-Cortes 方法</h3><p>这个方法同样是具有上述样本点<span class="math inline">\((x_k,f(x_k))\,\ k=0,1,\cdots,N\)</span>​. 不同的是, 我们先进行 Lagrange 插值 <spanclass="math display">\[P_N(x)=\sum_{k=0}^Nf(x_k)L_k(x)\]</span> 用插值函数的定积分近似替代真实定积分, 有 <spanclass="math display">\[\int_a^bf(x)dx=\sum_{k=0}^Nf(x_k)\int_a^bL_k(x)dx\]</span> 其中 <span class="math display">\[L_k(x)=\prod_{m\ne k}\frac{x-x_m}{x_k-x_m}=\Lambda_k(t)=\prod_{m\nek}\frac{t-m}{k-m}\ ,\ t=\frac{x-a}{b-a}\times N\]</span> 于是得到著名的 <strong>Newton-Cortes 公式</strong>: <spanclass="math display">\[\boxed{\int_a^bf(x)dx\approx\frac{b-a}{N}\sum_{k=0}^N\alpha_kf(x_k)}\]</span> 其中 <span class="math display">\[\alpha_k=\int_0^N\prod_{m\ne k}^{0\sim N}\frac{t-m}{k-m}dt\]</span></p><h3 id="newton-cortes-方法的应用">Newton-Cortes 方法的应用</h3><p>我们给出一些常用的公式:</p><ol type="1"><li><p><span class="math inline">\(N=1\)</span>, 梯形法则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{2}[f(x_0)+f(x_1)]\]</span></p></li><li><p><span class="math inline">\(N=2\)</span>​, Simpson 公式 <spanclass="math display">\[I=\displaystyle\frac{b-a}{6}[f(x_0)+4f(x_1)+f(x_2)]\]</span></p></li><li><p><span class="math inline">\(N=3\)</span>, <spanclass="math inline">\(\displaystyle\frac{3}{8}\)</span>​规则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{8}[f(x_0)+3f(x_1)+3f(x_2)+f(x_3)]\]</span></p></li><li><p><span class="math inline">\(N=4\)</span>​​, Milne 规则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{90}[7f(x_0)+32f(x_1)+12f(x_2)+32f(x_3)+7f(x_4)]\]</span></p></li><li><p><span class="math inline">\(N=6\)</span>, Weddle 规则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{840}[41f(x_0)+216f(x_1)+27f(x_2)+272f(x_3)+27f(x_4)+216f(x_5)+41f(x_6)]\]</span></p></li></ol><p><span class="math inline">\(N&gt;6\)</span>由于正负相消, 不太有效,此处不表.</p><p>需要注意的是, 这些公式并不代表我们真的只进行<spanclass="math inline">\(N\)</span>次分割. 例如Simpson公式,绝不意味着我们只对<spanclass="math inline">\([a,b]\)</span>进行一次分割,完全可以先细致地分为多个子区间, 再在每个子区间上单独使用Simpson公式.</p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>微积分数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>Newton-Cortes 方法</tag>
      
      <tag>数值微积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数数值计算(04)：Clenshaw 逆向迭代, Padé 近似</title>
    <link href="/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(04)%EF%BC%9AClenshaw%20%E9%80%86%E5%90%91%E8%BF%AD%E4%BB%A3,%20Pad%C3%A9%20%E8%BF%91%E4%BC%BC/"/>
    <url>/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(04)%EF%BC%9AClenshaw%20%E9%80%86%E5%90%91%E8%BF%AD%E4%BB%A3,%20Pad%C3%A9%20%E8%BF%91%E4%BC%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="clenshaw-逆向迭代">Clenshaw 逆向迭代</h2><p>真正用类似的展开来算目标函数值的时候, 我们可以采用 Clenshaw提出的逆向迭代的算法. 先回顾对一个函数展开的近似方案.</p><p>首先有一个可展开的函数<span class="math inline">\(f(x)\)</span>,以及一个基<spanclass="math inline">\(\{P_i(x)\}\)</span>(不一定要求正交归一),对于无穷维的基, 在<span class="math inline">\(i=N\)</span>处截断,用部分的基函数来近似描述<span class="math inline">\(f(x)\)</span>: <spanclass="math display">\[f(x)\approx S_N(x)=\sum_{k=0}^Nc_kP_k(x)\]</span> 基函数具有一个至多二阶的递推关系: <spanclass="math display">\[P_{k+1}(x)=\alpha_k(x)P_k(x)+\beta_k(x)P_{k-1}(x)\]</span> 现在, 假设我们已经得知<spanclass="math inline">\(\{c_i\}\)</span>, 目的是计算部分和函数<spanclass="math inline">\(S_N(x)\)</span>,这个计算可以通过构造新的函数进行.</p><h3 id="构造新函数">构造新函数</h3><p>我们引入一类新的函数<span class="math inline">\(\{b_i(x)\}\)</span>,并且规定 <span class="math display">\[b_{N+1}=b_{N+2}=0\]</span> 递推关系规定为 <span class="math display">\[b_k(x)=c_k+\alpha_k(x)b_{k+1}(x)+\beta_{k+1}(x)b_{k+2}(x)\]</span></p><h3 id="重新计算部分和函数">重新计算部分和函数</h3><p>我们顺势将部分和函数中的<spanclass="math inline">\(\{c_i\}\)</span>​全部替换, 分裂为三个和: <spanclass="math display">\[S_N(x)=\sum_{k=0}^Nb_k(x)P_k(x)-\sum_{k=0}^N\alpha_k(x)b_{k+1}(x)P_k(x)-\sum_{k=0}^N\beta_{k+1}(x)b_{k+2}(x)P_k(x)\]</span> 基函数<spanclass="math inline">\(\{P_i(x)\}\)</span>同样具有递推关系: <spanclass="math display">\[\begin{aligned}\beta_{k+1}(x)P_k(x)&amp;=P_{k+2}(x)-\alpha_{k+1}(x)P_{k+1}(x)\newline&amp;\Downarrow\newline\sum_{k=0}^N\beta_{k+1}(x)b_{k+2}(x)P_k(x)&amp;=\sum_{k=0}^Nb_{k+2}(x)P_{k+2}(x)-\sum_{k=0}^N\alpha_{k+1}(x)b_{k+2}(x)P_{k+1}(x)\newline&amp;=\sum_{k=2}^Nb_{k}(x)P_{k}(x)-\sum_{k=1}^N\alpha_{k}(x)b_{k+1}(x)P_{k}(x)\end{aligned}\]</span> 代回部分和函数, 得到 <span class="math display">\[S_N(x)=b_0(x)P_0(x)+b_1(x)P_1(x)-\alpha_0(x)b_1(x)P_0(x)\]</span> 我们通常不使用<spanclass="math inline">\(b_0(x)\)</span>(这样就可以少迭代一阶了),而是考虑<spanclass="math inline">\(b_0(x)=c_0+\alpha_0(x)b_1(x)+\beta_1(x)b_2(x)\)</span>,得到 <span class="math display">\[\boxed{S_N(x)=c_0P_0(x)+b_1(x)P_1(x)+\beta_1(x)b_2(x)P_2(x)}\label{eq1}\tag{eq1}\]</span></p><h3 id="方法总结">方法总结</h3><p>所谓 <strong>Clenshaw 逆向迭代法</strong>, 就是已知:</p><ol type="1"><li><p>一个基<span class="math inline">\(\{P_i(x)\}\)</span>​,以及它的递推关系 <span class="math display">\[P_{k+1}(x)=\alpha_k(x)P_k(x)+\beta_k(x)P_{k-1}(x)\]</span></p></li><li><p>一个原函数<span class="math inline">\(f(x)\)</span>,以及它基于某种方案在基<spanclass="math inline">\(\{P_i(x)\}\)</span>​上的有限维近似展开(前文多次称为<strong>部分和函数</strong>)的系数<spanclass="math inline">\(\{c_i\}\)</span> <span class="math display">\[f(x)\approx\sum_{k=0}^Nc_kP_k(x)\]</span></p></li></ol><p>于是构造新函数 <span class="math display">\[b_k(x)=c_k+\alpha_k(x)b_{k+1}(x)+\beta_{k+1}(x)b_{k+2}(x)\newlineb_{N+1}=b_{N+2}=0\]</span> 从而把<spanclass="math inline">\(N\)</span>项的求和化简为少数几项和, 如<spanclass="math inline">\(\eqref{eq1}\)</span>: <spanclass="math display">\[S_N(x)=c_0P_0(x)+b_1(x)P_1(x)+\beta_1(x)b_2(x)P_2(x)\]</span> 因为计算新函数<spanclass="math inline">\(\{b_i(x)\}\)</span>​时, 指标从大到小递推,因此得名为"逆向迭代法".</p><p>经过反向递推, 我们把一个多项的求和式通过递推关系变成了少量几项的求和,这一优点有些时候可以改进求和计算的收敛性和稳定性.</p><h2 id="padé-近似">Padé 近似</h2><p>还有一个常用的近似计算函数的方法是 Padé 近似,也是当作级数展开的补充方法来用. 因为计算很多高阶的级数展开并不容易, Padé近似相当于算了一些阶的级数展开以后来获得更精确结果的方法.</p><p>Padé 近似函数是一个分式函数的形式 <span class="math display">\[R(x)=\frac{\displaystyle\sum_{k=0}^Ma_kx^k}{1+\displaystyle\sum_{k=1}^Nb_kx^k}\]</span> 我们希望它在展开点(例如<spanclass="math inline">\(x=0\)</span>)处与函数相等至<spanclass="math inline">\(M+N\)</span>阶导数: <span class="math display">\[R^{(k)}(0)=c_k\newline(k=0,1,\cdots,M+N)\]</span> 并称它为函数的 <strong><spanclass="math inline">\((M,N)\)</span>阶 Padé 近似</strong>. 其中, <spanclass="math inline">\(c_k=f^{(k)}(0)\)</span>, 或者说<spanclass="math inline">\(f(x)\)</span>的幂级数为<spanclass="math inline">\(\displaystyle\sum_{k=0}^\inftyc_kx^k\)</span>.</p><p>分式函数求导或许比较繁琐, 我们退而求其次, 令<spanclass="math inline">\(R(x)=\displaystyle\sum_{k=0}^\inftyc_kx^k\)</span>, 并把分母乘到等式另一边, 再考虑各阶导数. 特别是<spanclass="math inline">\(M=N\)</span>的情形, 得到 <spanclass="math display">\[\begin{aligned}\sum_{m=1}^Nc_{N-m+k}b_m&amp;=-c_{N+k}\newlinea_k&amp;=\sum_{m=0}^kc_{k-m}b_m\newline(k&amp;=1,\cdots,N)\end{aligned}\label{eq2}\tag{eq2}\]</span> <spanclass="math inline">\(\eqref{eq2}\)</span>上式是一个<spanclass="math inline">\(N\)</span>元线性方程组, 可解出<spanclass="math inline">\(\{b_i\}\)</span>, 再代入<spanclass="math inline">\(\eqref{eq2}\)</span>下式, 计算出<spanclass="math inline">\(\{a_i\}\)</span>. 显然, 我们需要在知道<spanclass="math inline">\(\{c_i\}_{0\sim2N}\)</span>的前提下进行求解.</p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>Clenshaw 逆向迭代</tag>
      
      <tag>Padé近似</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数数值计算(03)：Chebyshev 多项式近似</title>
    <link href="/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(03)%EF%BC%9AChebyshev%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%91%E4%BC%BC/"/>
    <url>/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(03)%EF%BC%9AChebyshev%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%91%E4%BC%BC/</url>
    
    <content type="html"><![CDATA[<p>很多的函数是以级数的形式表达的, 比如 Bessel 函数, Legendre 函数.级数展开在数学上是收敛的, 但是直接按照级数去计算往往并不是最合适的方法,例如</p><p><span class="math display">\[\arctan x=x-\frac{1}{3}x^3+\frac{1}{5}x^5-\cdots\ ,\ x\in[-1,1]\]</span></p><p>利用这个展开式计算<span class="math inline">\(\arctan1\)</span>,即<span class="math inline">\(\displaystyle\frac{\pi}{4}\)</span>,收敛速度慢得离谱. 我们介绍一种新的展开方式.</p><h2 id="chebyshev-多项式及其基本性质">Chebyshev 多项式及其基本性质</h2><p><strong>Chebyshev 多项式</strong> 定义为 <spanclass="math display">\[T_n(x)=\cos(n\arccos x)\ ,\ x\in[-1,1]\]</span></p><p>引入辅助角<span class="math inline">\(x=\cos\phi\)</span>,得到一个正交归一关系</p><p><span class="math display">\[\int_{0}^\piT_i(\cos\phi)T_j(\cos\phi)d\phi=\frac{\pi}{2}(1+\delta_{0i})\delta_{ij}\]</span></p><p>用<span class="math inline">\(x\)</span>表达:</p><p><span class="math display">\[\int_{-1}^1\frac{T_i(x)T_j(x)}{\sqrt{1-x^2}}dx=\begin{aligned}\begin{cases}\displaystyle0&amp;\text{if }i\ne j\\\displaystyle\frac{\pi}{2}&amp;\text{if }i=j\ne0\\\displaystyle\pi&amp;\text{if }i=j=0\end{cases}\end{aligned}\]</span></p><h2 id="零点处的正交归一关系">零点处的正交归一关系</h2><p>在<spanclass="math inline">\([-1,1]\)</span>上的正交归一关系提示我们将其用作函数展开的基:<span class="math display">\[f(x)=\frac{c_0}{2}+\sum_{k=1}^{N-1}c_kT_k(x)\]</span></p><p>如果希望这个式子在<spanclass="math inline">\(T_N(x)\)</span>的零点处严格成立, 则</p><p><span class="math display">\[f\left[\cos((k+\frac{1}{2})\pi/N)\right]=\frac{c_0}{2}+\sum_{m=1}^{N-1}c_m\cos((k+\frac{1}{2})m\pi/N)\]</span> 我们先考虑两个特别的求和式.</p><h3 id="displaystylesum_k0n-1coskfrac12theta">1. <spanclass="math inline">\(\displaystyle\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})\theta)\)</span></h3><p>这个式子没啥好说的, 凑一个因子<spanclass="math inline">\(\sin(\theta/2)\)</span>, 得 <spanclass="math display">\[\begin{aligned}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})\theta)&amp;=\frac{1}{\sin\theta/2}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})\theta)\sin\theta/2\newline&amp;=\sum_{k=0}^{N-1}\frac{\sin[][(k+1)\theta]-\sin k\theta}{2\sin\theta/2}\newline&amp;=\frac{\sin(N\theta)}{2\sin\theta/2}\end{aligned}\]</span></p><h3 id="displaystylesum_k0n-1coskfrac12mpincoskfrac12mpin">2. <spanclass="math inline">\(\displaystyle\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})m\pi/N)\cos((k+\frac{1}{2})m&#39;\pi/N)\)</span></h3><p>同样进行积化和差 <span class="math display">\[\begin{aligned}\text{原式}&amp;=\frac{1}{2}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})(m+m&#39;)\pi/N)+\frac{1}{2}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})(m-m&#39;)\pi/N)\newline&amp;=\frac{\sin(m+m&#39;)\pi}{4\displaystyle\sin\frac{m+m&#39;}{2N}\pi}+\frac{\sin(m-m&#39;)\pi}{4\displaystyle\sin\frac{m-m&#39;}{2N}\pi}\end{aligned}\]</span> 简单地讨论<span class="math inline">\(m\)</span>和<spanclass="math inline">\(m&#39;\)</span>的取值, 得到 <spanclass="math display">\[\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})m\pi/N)\cos((k+\frac{1}{2})m&#39;\pi/N)=\begin{aligned}\begin{cases}\displaystyle0&amp;\text{if }m\ne m&#39;\newline\displaystyle\frac{N}{2}&amp;\text{if }m=m&#39;\ne0\newline\displaystyleN&amp;\text{if }m=m&#39;=0\end{cases}\end{aligned}\]</span> 记作<span class="math inline">\(T_{mm&#39;}\)</span></p><h2 id="chebyshev-展开">Chebyshev 展开</h2><p>回到系数满足的条件 <span class="math display">\[f\left[\cos((k+\frac{1}{2})\pi/N)\right]=\frac{c_0}{2}+\sum_{m=1}^{N-1}c_m\cos((k+\frac{1}{2})m\pi/N)\]</span> 两边同乘以<spanclass="math inline">\(\displaystyle\cos((k+\frac{1}{2})m&#39;\pi/N)\)</span>并对<spanclass="math inline">\(k\)</span>​​求和, 得到 <span class="math display">\[\sum_{k=0}^{N-1}f\left[\cos((k+\frac{1}{2})\pi/N)\right]\cos((k+\frac{1}{2})m&#39;\pi/N)=\frac{c_0}{2}T_{0m&#39;}+\sum_{m=1}^{N-1}c_mT_{mm&#39;}=\frac{N}{2}c_0\delta_{0m&#39;}+\frac{N}{2}c_{m}\delta_{mm&#39;}\]</span> 取<span class="math inline">\(m&#39;\)</span>为<spanclass="math inline">\([0,N-1]\)</span>上不同的整数, 得到 <spanclass="math display">\[\boxed{c_m=\frac{2}{N}\sum_{k=0}^{N-1}f\left[\cos((k+\frac{1}{2})\pi/N)\right]\cos((k+\frac{1}{2})m\pi/N)}\]</span> 这就是 Chebyshev 展开的系数计算公式.</p><p>这里给出 Chebyshev 展开在 Runge 现象中的应用, 它的各个基之间是正交的,而幂级数的基之间具有很大的overlap, 所以前者才能解决所谓的 Runge现象.</p><figure><imgsrc="%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(03)%EF%BC%9AChebyshev%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%91%E4%BC%BC/chebyshev_expansion_of_runge_function.png"alt="Runge 函数的 Chebyshev 展开" /><figcaption aria-hidden="true">Runge 函数的 Chebyshev 展开</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>Chebyshev 多项式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数数值计算(02)：有理函数插值法, 样条函数插值法</title>
    <link href="/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(02)%EF%BC%9A%E6%9C%89%E7%90%86%E5%87%BD%E6%95%B0%E6%8F%92%E5%80%BC%E6%B3%95,%20%E6%A0%B7%E6%9D%A1%E5%87%BD%E6%95%B0%E6%8F%92%E5%80%BC%E6%B3%95/"/>
    <url>/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(02)%EF%BC%9A%E6%9C%89%E7%90%86%E5%87%BD%E6%95%B0%E6%8F%92%E5%80%BC%E6%B3%95,%20%E6%A0%B7%E6%9D%A1%E5%87%BD%E6%95%B0%E6%8F%92%E5%80%BC%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="有理函数插值法">有理函数插值法</h2><p><ahref="https://notes.rainchan.me/posts/函数数值计算(01)：多项式内插">上篇笔记</a>提到,当函数在某个区间内的变化行为比较剧烈时, 多项式内插会出现剧烈震荡的行为.这时候利用有理函数进行内插可能会更加合适一些,它的构造可以采用一个分式的形式: <span class="math display">\[\Phi_{n,n}(x)=\frac{P_n(x)}{Q_n(x)}\]</span></p><p>其中<span class="math inline">\(P_n\)</span>和<spanclass="math inline">\(Q_n\)</span>都是<spanclass="math inline">\(n\)</span>阶多项式, 并且它们互素.</p><p>想要完全确定两者, 需要<spanclass="math inline">\(2n+2\)</span>个支撑点, 但是在<spanclass="math inline">\(\Phi_{n,n}\)</span>中, 两者相除,实际上造成了一个自由的公倍数, 也就是只需要<spanclass="math inline">\(2n+1\)</span>个支撑点, 记为<spanclass="math inline">\((x_0,y_0),(x_1,y_1),\cdots,(x_{2n},y_{2n})\)</span>.作为内插函数, <spanclass="math inline">\(\Phi_{n,n}\)</span>需要通过所有的支撑点,可以写成如下形式:</p><p><span class="math display">\[\Phi_{n,n}(x)=\phi_0(x_0)+\frac{x-x_0}{\Phi_{n-1,n-1}(x)}\]</span></p><p>其中, <spanclass="math inline">\(\phi_0(x_0)=y_0\)</span>以通过支撑点<spanclass="math inline">\(0\)</span>. 分母又可以写为:</p><p><span class="math display">\[\Phi_{n-1,n-1}(x)=\phi_1(x_0,x_1)+\frac{x-x_1}{\Phi_{n-2,n-2}(x)}\]</span></p><p>这样, <spanclass="math inline">\(\phi_1(x_0,x_1)\)</span>必须满足</p><p><span class="math display">\[\phi_0(x_0)+\frac{x_1-x_0}{\phi_1(x_0,x_1)}=y_1\Rightarrow\phi_1=\frac{x_1-x_0}{y_1-\phi_0(x_0)}\]</span></p><p>为了形式对称性, 把<span class="math inline">\(y_1\)</span>改写为<spanclass="math inline">\(\phi_0(x_1)\)</span>, 则</p><p><span class="math display">\[\phi_1(x_0,x_1)=\frac{x_1-x_0}{\phi_0(x_1)-\phi_0(x_0)}\]</span></p><p>对于更一般的情况, 我们不妨倒转递推方向</p><p><span class="math display">\[\Phi_{n-j-1,n-j-1}(x)=\frac{x-x_j}{\Phi_{n-j,n-j}(x)-\phi_j(x_0,x_1,\cdots,x_j)}\]</span></p><p>令<span class="math inline">\(x=x_{j+1}\)</span>, 立即得到</p><p><span class="math display">\[\phi_{j+1}(x_0, x_1, \cdots,x_{j+1})=\frac{x_{j+1}-x_{j}}{\phi_j(x_0,x_1,\cdots,x_{j-1},x_{j+1})-\phi_j(x_0,x_1,\cdots,x_{j-1},x_{j}}\]</span></p><p>它给出了各阶<span class="math inline">\(\phi\)</span>函数的递推关系.而<span class="math inline">\(\Phi_{n,n}\)</span>写成连分数的形式:</p><p><span class="math display">\[\Phi_{n,n}(x)=\phi_0(x_0)+\frac{x-x_0}{\phi_1(x_0,x_1)+\displaystyle\frac{x-x_1}{\phi_2(x_0,x_1,x_2)+\displaystyle\frac{x-x_2}{\ddots+\displaystyle\frac{x-x_{2n-1}}{\phi_{2n}(x_0,\cdots,x_{2n})}}}}\]</span></p><p>如果我们在一个单调的区间插值, 那么上述构造不会发散. 特别是对于 Runge函数这种有理分式, 把<span class="math inline">\(x^2\)</span>看作自变量,只需构造<spanclass="math inline">\(\Phi_{1,1}\)</span>形式的有理内插函数,取三个支撑点就能完成内插, 并且和原函数一模一样, 所谓的 Runge现象自然也就不再出现.</p><h2 id="样条函数插值法">样条函数插值法</h2><p>样条函数的基本思想是在每两个支撑点之间用一段多项式函数来表示,最常用的是三次样条函数, 这里也仅介绍三次样条函数.</p><h3 id="基本准备">基本准备</h3><p>在区间<span class="math inline">\([a,b]\)</span>上包括两端一共有<spanclass="math inline">\(n+1\)</span>个支撑点: <spanclass="math inline">\((x_0,y_0),(x_1,y_1),\cdots,(x_n,y_n)\)</span>.样条函数记作<span class="math inline">\(S(x), x\in[a,b]\)</span>.</p><p>每个子区间都具有一个三次多项式作为样条函数, 也就是<spanclass="math inline">\(4n\)</span>个待定参数. 可用的方程又有多少个呢?</p><ul><li><p>每个内部支撑点限制左右两个子区间的函数值, 给出两个方程,而外部两个支撑点各自只给出一个限制, 一共<spanclass="math inline">\(2n\)</span>个方程;</p></li><li><p>每个内部支撑点限制左右导函数相等, 一共<spanclass="math inline">\(n-1\)</span>个方程;</p></li><li><p>每个内部支撑点限制左右二阶导数相等, 一共<spanclass="math inline">\(n-1\)</span>个方程.</p></li></ul><p>我们现在有<span class="math inline">\(4n-2\)</span>个限制条件可用,得到的样条函数具有<span class="math inline">\(2\)</span>个自由度.自由度的来源无非是端点处边界条件不够完备, 我们只知道边界处的函数值,不知道边界处的导函数或者是二阶导函数的取值,因此需要再引入两个独立的约束方程,具体形式可以研究问题的数学或物理性质得到.</p><h3 id="计算参数">计算参数</h3><p>定义二阶导数在各个支撑点处的取值为 <strong>矩</strong>:</p><p><span class="math display">\[M_j=S&#39;&#39;(x_j)\ ,\ j =0,1,\cdots,n\]</span></p><p>三次多项式的二阶导数是一次函数, 因而对于每一段<spanclass="math inline">\([x_j,x_{j+1}], \ j=0,1,\cdots,n-1\)</span>,不难写出<span class="math inline">\(S&#39;&#39;\)</span>的表达式</p><p><span class="math display">\[S&#39;&#39;(x)=\frac{M_j(x_{j+1}-x)+M_{j+1}(x-x_j)}{x_{j+1}-x_j}\]</span></p><p>连续两次积分, 得到</p><p><span class="math display">\[S(x)=\frac{M_j(x_{j+1}-x)^3}{6(x_{j+1}-x_j)}+\frac{M_{j+1}(x-x_j)^3}{6(x_{j+1}-x_j)}+A_j(x-x_j)+B_j\, x\in[x_j,x_{j+1}]\]</span></p><p>这里<span class="math inline">\(A, B, M\)</span>一共是<spanclass="math inline">\(3n+1\)</span>个参数<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="为什么不是 $4n$ 个? 因为提前使用了二阶导连续的条件, 消去了 $n-1$ 个系数">[1]</span></a></sup>,考虑<span class="math inline">\(x_j\)</span>处函数值连续, 有</p><p><span class="math display">\[\frac{M_j(x_{j+1}-x_j)^2}{6}+B_j=\frac{M_j(x_{j}-x_{j-1})^2}{6}+A_{j-1}(x_j-x_{j-1})+B_{j-1}=y_j\]</span></p><p>得到</p><p><span class="math display">\[\boxed{\begin{aligned}B_j&amp;=y_j-\frac{M_j(x_{j+1}-x_j)^2}{6}\newlineA_j&amp;=\frac{y_{j+1}-y_j}{x_{j+1}-x_j}-\frac{M_{j+1}-M_j}{6}(x_{j+1}-x_j)\end{aligned}}\]</span></p><p>现在只剩<span class="math inline">\(n+1\)</span>个待定参数了, 同样地,内部限制条件只有<spanclass="math inline">\(n-1\)</span>个支撑点处的导数连续.</p><p><span class="math display">\[S&#39;(x)=-\frac{M_j(x_{j+1}-x)^2}{2(x_{j+1}-x_j)}+\frac{M_{j+1}(x-x_j)^2}{2(x_{j+1}-x_j)}+A_j\, x\in[x_j,x_{j+1}]\]</span></p><p>考虑<span class="math inline">\(x_j\)</span>处的导函数连续, 有</p><p><span class="math display">\[-\frac{M_j(x_{j+1}-x_j)}{2}+A_j=\frac{M_j(x_j-x_{j-1})}{2}+A_{j-1}\]</span></p><p>代入整理, 最终得到</p><p><span class="math display">\[\boxed{    \frac{x_{j+1}-x_j}{6}M_{j+1}+\frac{x_{j+1}-x_j}{3}M_j+\frac{x_j-x_{j-1}}{6}M_{j-1}=\frac{y_{j+1}-y_j}{x_{j+1}-x_j}-\frac{y_j-y_{j-1}}{x_j-x_{j-1}}}\]</span></p><p>这些式子给出全部的支撑点的约束方程,只要再给边界上<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="事实上可以是任两个无关且独立于之前所有约束方程的方程即可, 但实际问题中常常更容易得知边界处的条件">[2]</span></a></sup>引入两个独立约束即可.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>为什么不是 <spanclass="math inline">(4n)</span> 个? 因为提前使用了二阶导连续的条件,消去了 <span class="math inline">(n-1)</span> 个系数<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>事实上可以是任两个无关且独立于之前所有约束方程的方程即可,但实际问题中常常更容易得知边界处的条件<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>插值法</tag>
      
      <tag>有理函数插值</tag>
      
      <tag>样条函数插值法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数数值计算(01)：多项式插值</title>
    <link href="/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(01)%EF%BC%9A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8F%92%E5%80%BC/"/>
    <url>/posts/%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(01)%EF%BC%9A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8F%92%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="lagrange-插值法">Lagrange 插值法</h2><p>考虑区间<spanclass="math inline">\([x_0,x_n]\)</span>上的n次多项式内插</p><p><span class="math display">\[P_n(x)=a_0+a_1x+\cdots+a_nx^n\]</span></p><p>已知的点为<spanclass="math inline">\((x_0,y_0),(x_1,y_1),\cdots,(x_n,y_n)\)</span>.内插要求多项式的曲线通过这些点:</p><p><span class="math display">\[P_n(x_j)=y_j\ ,\ j = 0, 1, \cdots, n\]</span></p><p>为了求出这个问题的一般解, 我们将<spanclass="math inline">\(P_n\)</span>写成多项式的和:</p><p><span class="math display">\[P_n(x) = \sum_jp_{nj}(x)\]</span></p><p>其中, <spanclass="math inline">\(p_{nj}(x_k)=y_j\delta_{jk}\)</span>.</p><p>由于<span class="math inline">\(p_{nj}\)</span>具有<spanclass="math inline">\(n\)</span>个零点, 故它必然能写成</p><p><span class="math display">\[p_{nj}(x)=a_{nj}\prod_{m=0且m\ne j}^{n}(x-x_m)\]</span></p><p><span class="math inline">\(a_{nj}\)</span>只是系数, 因为<spanclass="math inline">\(n\)</span>个零点已经构成了<spanclass="math inline">\(n\)</span>次多项式. 代入<spanclass="math inline">\((x_j, y_j)\)</span>得到</p><p><span class="math display">\[a_{nj}=\frac{y_j}{\prod_{m=0且m\ne j}^{n}(x_j-x_m)}\]</span></p><p>最终我们得到</p><p><span class="math display">\[\boxed{P_n(x)=\sum_jy_jL_j(x)}\newline \ \newline\text{其中, } \boxed{L_j(x)=\prod_{m\ne j}\frac{x-x_m}{x_j-x_m}}\]</span></p><p>这个结果被称作 <strong>Larange多项式</strong>, 也称<strong>Lagrange内插公式</strong>.</p><h2 id="newton-插值法">Newton 插值法</h2><p>Newton 的多项式内插法是一种递推方法:</p><p><span class="math display">\[N(x)=\sum_{j=0}^{n}a_jn_j(x)\newline\text{其中, }n_j(x)=\prod_{k=0}^{j-1}(x-x_k),\ n_0(x)=1\]</span></p><p>好处是如果增加一个支撑点, 不破坏之前所有支撑条件, 仅需计算<spanclass="math inline">\(a_{n+1}\)</span>和<spanclass="math inline">\(n_{n+1}(x)\)</span>:</p><p><span class="math display">\[a_0+\sum_{j=1}^{n+1}a_j\cdot\prod_{k=0}^{j-1}(x_{n+1}-x_k) = y_{n+1}\]</span></p><p>如何求解系数呢? 上式相当于一个方程组</p><p><span class="math display">\[\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; \cdots &amp; 0\\1 &amp; x_1-x_0 &amp; 0 &amp; \cdots &amp; 0\\1 &amp; x_2-x_0 &amp; (x_2-x_0)(x_2-x_1) &amp; \cdots &amp; 0\\\cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; 0\\1 &amp; x_n-x_0 &amp; (x_n-x_0)(x_n-x_1) &amp; \cdots &amp;\prod_{j=0}^{n-1}(x_n-x_j)\end{pmatrix}\begin{pmatrix}a_0 \\ a_1 \\ a_2 \\ \cdots \\ a_n\end{pmatrix}=\begin{pmatrix}y_0 \\ y_1 \\ y_2 \\ \cdots \\ y_n\end{pmatrix}\]</span></p><p>解这个下三角矩阵描述的线性方程组问题, 即得各项系数.</p><h2 id="neville-迭代法">Neville 迭代法</h2><p>先构造<span class="math inline">\(n+1\)</span>个常数函数:</p><p><span class="math display">\[Q_i(x)=y_i\]</span></p><p>按指标大小顺序排列<span class="math inline">\(Q_i\)</span>,再用每对相邻的函数构造更高阶函数, 并且用双下标做记号:</p><p><span class="math display">\[P_{ij}=\frac{(x-x_i)Q_j-(x-x_j)Q_i}{x_j-x_i}\]</span></p><p>现在得到<span class="math inline">\(n\)</span>个双下标的一次函数,按第一指标顺序排列, 再用相邻的函数对构造二次函数:</p><p><span class="math display">\[P_{ijk}=\frac{(x-x_i)P_{jk}-(x-x_k)P_{ij}}{x_k-x_i}\]</span></p><p>至于下标, 略去重复数字, 为三下标. 如法炮制, 最终得到单个<spanclass="math inline">\(n\)</span>次函数.</p><h2 id="runge-现象">Runge 现象</h2><p>一般情况下, 多项式的次数越多, 需要的数据就越多, 而预测也就越准确.但也存在插值次数越高, 插值结果越偏离原函数的现象,特别常发生在区间的端点处, 称为 <strong>Runge现象</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="关于 Runge 现象的定性介绍, 可以参见[它的维基百科](https://zh.wikipedia.org/wiki/龙格现象).">[1]</span></a></sup>.</p><p>特别地, 考虑函数</p><p><span class="math display">\[f(x)=\frac{1}{1+25x^2}\]</span></p><p>称为 <strong>Runge 函数</strong>. 在区间<spanclass="math inline">\([-1, 1]\)</span>上, 以<spanclass="math inline">\(\frac{2}{n}\)</span>为步长选取支撑点进行 Lagrange插值, 得到的结果如下所示:</p><p><img title="Runge 现象" src="%E5%87%BD%E6%95%B0%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97(01)%EF%BC%9A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8F%92%E5%80%BC/runge%27s_phenomenon.png" alt="Runge 现象" data-align="inline" width="662"></p><p>造成这种现象的主要原因是，拉格朗日插值使用的函数基组<spanclass="math inline">\(1,𝑥,𝑥^2,\cdots\)</span>并不是正交基,插值结果十分病态, 可以考虑对基函数进行 Schmidt 正交化,但更方便的方案是选取既正交又简单的非多项式基,或者干脆不使用这种内插方案, 这是<ahref="notes.rainchan.me/posts/函数数值计算(02)：有理函数插值法,%20样条函数插值法.md">下篇笔记</a>将要讨论到的.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>关于 Runge 现象的定性介绍,可以参见<ahref="https://zh.wikipedia.org/wiki/龙格现象">它的维基百科</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数值计算</tag>
      
      <tag>插值法</tag>
      
      <tag>多项式插值</tag>
      
      <tag>Lagrange 插值法</tag>
      
      <tag>Newton 插值法</tag>
      
      <tag>Neville 迭代法</tag>
      
      <tag>Runge 现象</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
