<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微积分的数值计算：简单的微积分方法</title>
    <link href="/2024/03/Fri%20Mar%2015%202024%2022:46:19%20GMT+0800/%E5%BE%AE%E7%A7%AF%E5%88%86%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E5%BE%AE%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95"/>
    <url>/2024/03/Fri%20Mar%2015%202024%2022:46:19%20GMT+0800/%E5%BE%AE%E7%A7%AF%E5%88%86%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E5%BE%AE%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95</url>
    
    <content type="html"><![CDATA[<p>本节给出一些相当trivial的微积分的数值计算方法.</p><h2 id="数值微分">数值微分</h2><h3 id="差分法">差分法</h3><p>从定义出发即可, 与数学不同的是, 我们无法做到计算"无穷小",它压根不是个数, 只能尽量给出较小的差分长度: <spanclass="math display">\[f&#39;(x)\approx\frac{f(x+h)-f(x)}{h}\]</span> 对<span class="math inline">\(f(x)\)</span>作展开, 即<spanclass="math inline">\(f(x+h)=f(x)+c_1h+c_2h^2+\cdots\)</span>, 得到<span class="math display">\[f&#39;(x)\approx c_1+c_2h+o(h)\]</span> 这给出<span class="math inline">\(\sim h\)</span>的误差.不难想到一个改进方案 <span class="math display">\[f&#39;(x)\approx\frac{f(x+h)-f(x-h)}{2h}\]</span> 同样代入展开式, 得到 <span class="math display">\[f&#39;(x)\approx c_1+c_3h^2+o(h^2)\]</span> 它给出<span class="math inline">\(\sim h^2\)</span>的误差.</p><h3 id="基函数法">基函数法</h3><p>当然还有相对复杂的计算方法, 比如, 如果已经有<spanclass="math inline">\(f(x)\)</span>​的 Chebyshev 展开 <spanclass="math display">\[f(x)\approx\sum_{k=0}^Nc_kT_k(x)\]</span> 那么它的导数可以表示为 <span class="math display">\[f&#39;(x)\approx\sum_{k=0}^Nc_k&#39;T_k(x)\]</span> 其中, <spanclass="math inline">\(c_{k-1}&#39;=c_{k+1}&#39;+2kc_k\)</span>,并且<span class="math inline">\(c_{N}&#39;=c_{N-1}&#39;=0\)</span>.</p><h2 id="数值积分的-newton-cortes-方法">数值积分的 Newton-Cortes方法</h2><h3 id="微元法">微元法</h3><p>微元法实际上不是这里的 Newton - Cortes 方法,它只是从定积分定义出发的方案. 考虑一个函数<spanclass="math inline">\(f(x)\)</span>在闭区间<spanclass="math inline">\([a,b]\)</span>上可积, 它的定积分为 <spanclass="math display">\[\int_a^bf(x)dx=\lim_{\lambda\to0^+}\sum_{l=1}^Nf(\xi_l)\Delta x_l\]</span> 其中将区间<spanclass="math inline">\([a,b]\)</span>分割为<spanclass="math inline">\(N\)</span>个子区间<spanclass="math inline">\((x_{l-1},x_l)\ ,\ l=1,2,\cdots,N\)</span>, <spanclass="math inline">\(\Delta x_l=x_l-x_{l-1}\)</span>, <spanclass="math inline">\(\xi_l\in(x_{l-1},x_l)\)</span>. 而<spanclass="math inline">\(\lambda\)</span>则是最大的区间长度, 即 <spanclass="math display">\[\lambda=\max\{\Delta x_1,\Delta x_2,\cdots,\Delta x_N\}\]</span> 和差分法类似, 我们实现不了<spanclass="math inline">\(\lambda\to0^+(N\to\infty)\)</span>的无穷细致,那就足够细致. 取分割方案为<span class="math inline">\(N\)</span>等分, 即<span class="math display">\[x_k=a+\frac{b-a}{N}\times k\newline\Delta x_l=\lambda=\frac{b-a}{N}\]</span> 并对每一个区间使用梯形法则, 得到 <span class="math display">\[\int_a^bf(x)dx\approx\frac{b-a}{N}\times(\frac{f(x_0)}{2}+\sum_{j=1}^{N-1}f(x_j)+\frac{f(x_N)}{2})\]</span></p><h3 id="newton-cortes-方法">Newton-Cortes 方法</h3><p>这个方法同样是具有上述样本点<span class="math inline">\((x_k,f(x_k))\,\ k=0,1,\cdots,N\)</span>​. 不同的是, 我们先进行 Lagrange 插值 <spanclass="math display">\[P_N(x)=\sum_{k=0}^Nf(x_k)L_k(x)\]</span> 用插值函数的定积分近似替代真实定积分, 有 <spanclass="math display">\[\int_a^bf(x)dx=\sum_{k=0}^Nf(x_k)\int_a^bL_k(x)dx\]</span> 其中 <span class="math display">\[L_k(x)=\prod_{m\ne k}\frac{x-x_m}{x_k-x_m}=\Lambda_k(t)=\prod_{m\nek}\frac{t-m}{k-m}\ ,\ t=\frac{x-a}{b-a}\times N\]</span> 于是得到著名的 <strong>Newton-Cartes 公式</strong>: <spanclass="math display">\[\boxed{\int_a^bf(x)dx\approx\frac{b-a}{N}\sum_{k=0}^N\alpha_kf(x_k)}\]</span> 其中 <span class="math display">\[\alpha_k=\int_0^N\prod_{m\ne k}^{0\sim N}\frac{t-m}{k-m}dt\]</span></p><h3 id="newton-cartes-方法的应用">Newton-Cartes 方法的应用</h3><p>我们给出一些常用的公式:</p><ol type="1"><li><p><span class="math inline">\(N=1\)</span>, 梯形法则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{2}[f(x_0)+f(x_1)]\]</span></p></li><li><p><span class="math inline">\(N=2\)</span>​, Simpson 公式 <spanclass="math display">\[I=\displaystyle\frac{b-a}{6}[f(x_0)+4f(x_1)+f(x_2)]\]</span></p></li><li><p><span class="math inline">\(N=3\)</span>, <spanclass="math inline">\(\displaystyle\frac{3}{8}\)</span>​规则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{8}[f(x_0)+3f(x_1)+3f(x_2)+f(x_3)]\]</span></p></li><li><p><span class="math inline">\(N=4\)</span>​​, Milne 规则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{90}[7f(x_0)+32f(x_1)+12f(x_2)+32f(x_3)+7f(x_4)]\]</span></p></li><li><p><span class="math inline">\(N=6\)</span>, Weddle 规则 <spanclass="math display">\[I=\displaystyle\frac{b-a}{840}[41f(x_0)+216f(x_1)+27f(x_2)+272f(x_3)+27f(x_4)+216f(x_5)+41f(x_6)]\]</span></p></li></ol><p><span class="math inline">\(N&gt;6\)</span>由于正负相消, 不太有效,此处不表.</p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>微积分的数值计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算物理</tag>
      
      <tag>微积分的数值计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数的数值计算问题：Chebyshev 多项式近似</title>
    <link href="/2024/03/Tue%20Mar%2012%202024%2020:55:33%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9AChebyshev%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%91%E4%BC%BC"/>
    <url>/2024/03/Tue%20Mar%2012%202024%2020:55:33%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9AChebyshev%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%91%E4%BC%BC</url>
    
    <content type="html"><![CDATA[<p>本节讨论一些函数的近似与数值计算问题. 很多的函数是以级数的形式表达的,比如 Bessel 函数, Legendre 函数. 级数展开在数学上是收敛的,但是直接按照级数去计算往往并不是最合适的方法, 例如</p><p><span class="math display">\[\arctan x=x-\frac{1}{3}x^3+\frac{1}{5}x^5-\cdots\ ,\ x\in[-1,1]\]</span></p><p>利用这个展开式计算<span class="math inline">\(\arctan1\)</span>,即<span class="math inline">\(\displaystyle\frac{\pi}{4}\)</span>,收敛速度慢得离谱. 我们介绍一种新的展开方式。</p><h2 id="chebyshev-多项式及其基本性质">Chebyshev 多项式及其基本性质</h2><p><strong>Chebyshev 多项式</strong> 定义为 <spanclass="math display">\[T_n(x)=\cos(n\arccos x)\ ,\ x\in[-1,1]\]</span></p><p>引入辅助角<span class="math inline">\(x=\cos\phi\)</span>,得到一个正交归一关系</p><p><span class="math display">\[\int_{0}^\piT_i(\cos\phi)T_j(\cos\phi)d\phi=\frac{\pi}{2}(1+\delta_{0i})\delta_{ij}\]</span></p><p>用<span class="math inline">\(x\)</span>表达:</p><p><span class="math display">\[\int_{-1}^1\frac{T_i(x)T_j(x)}{\sqrt{1-x^2}}dx=\begin{aligned}\begin{cases}\displaystyle0&amp;\text{if }i\ne j\\\displaystyle\frac{\pi}{2}&amp;\text{if }i=j\ne0\\\displaystyle\pi&amp;\text{if }i=j=0\end{cases}\end{aligned}\]</span></p><h2 id="零点处的正交归一关系">零点处的正交归一关系</h2><p>在<spanclass="math inline">\([-1,1]\)</span>上的正交归一关系提示我们将其用作函数展开的基:<span class="math display">\[f(x)=\frac{c_0}{2}+\sum_{k=1}^{N-1}c_kT_k(x)\]</span></p><p>如果希望这个式子在<spanclass="math inline">\(T_N(x)\)</span>的零点处严格成立, 则</p><p><span class="math display">\[f\left[\cos((k+\frac{1}{2})\pi/N)\right]=\frac{c_0}{2}+\sum_{m=1}^{N-1}c_m\cos((k+\frac{1}{2})m\pi/N)\]</span> 我们先考虑两个特别的求和式.</p><h3 id="displaystylesum_k0n-1coskfrac12theta">1. <spanclass="math inline">\(\displaystyle\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})\theta)\)</span></h3><p>这个式子没啥好说的, 凑一个因子<spanclass="math inline">\(\sin(\theta/2)\)</span>, 得 <spanclass="math display">\[\begin{aligned}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})\theta)&amp;=\frac{1}{\sin\theta/2}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})\theta)\sin\theta/2\newline&amp;=\sum_{k=0}^{N-1}\frac{\sin[][(k+1)\theta]-\sin k\theta}{2\sin\theta/2}\newline&amp;=\frac{\sin(N\theta)}{2\sin\theta/2}\end{aligned}\]</span></p><h3 id="displaystylesum_k0n-1coskfrac12mpincoskfrac12mpin">2. <spanclass="math inline">\(\displaystyle\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})m\pi/N)\cos((k+\frac{1}{2})m&#39;\pi/N)\)</span></h3><p>同样进行积化和差 <span class="math display">\[\begin{aligned}\text{原式}&amp;=\frac{1}{2}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})(m+m&#39;)\pi/N)+\frac{1}{2}\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})(m-m&#39;)\pi/N)\newline&amp;=\frac{\sin(m+m&#39;)\pi}{4\displaystyle\sin\frac{m+m&#39;}{2N}\pi}+\frac{\sin(m-m&#39;)\pi}{4\displaystyle\sin\frac{m-m&#39;}{2N}\pi}\end{aligned}\]</span> 简单地讨论<span class="math inline">\(m\)</span>和<spanclass="math inline">\(m&#39;\)</span>的取值, 得到 <spanclass="math display">\[\sum_{k=0}^{N-1}\cos((k+\frac{1}{2})m\pi/N)\cos((k+\frac{1}{2})m&#39;\pi/N)=\begin{aligned}\begin{cases}\displaystyle0&amp;\text{if }m\ne m&#39;\newline\displaystyle\frac{N}{2}&amp;\text{if }m=m&#39;\ne0\newline\displaystyleN&amp;\text{if }m=m&#39;=0\end{cases}\end{aligned}\]</span> 记作<span class="math inline">\(T_{mm&#39;}\)</span></p><h2 id="chebyshev-展开">Chebyshev 展开</h2><p>回到系数满足的条件 <span class="math display">\[f\left[\cos((k+\frac{1}{2})\pi/N)\right]=\frac{c_0}{2}+\sum_{m=1}^{N-1}c_m\cos((k+\frac{1}{2})m\pi/N)\]</span> 两边同乘以<spanclass="math inline">\(\displaystyle\cos((k+\frac{1}{2})m&#39;\pi/N)\)</span>并对<spanclass="math inline">\(k\)</span>​​求和, 得到 <span class="math display">\[\sum_{k=0}^{N-1}f\left[\cos((k+\frac{1}{2})\pi/N)\right]\cos((k+\frac{1}{2})m&#39;\pi/N)=\frac{c_0}{2}T_{0m&#39;}+\sum_{m=1}^{N-1}c_mT_{mm&#39;}=\frac{N}{2}c_0\delta_{0m&#39;}+\frac{N}{2}c_{m}\delta_{mm&#39;}\]</span> 取<span class="math inline">\(m&#39;\)</span>为<spanclass="math inline">\([0,N-1]\)</span>上不同的整数, 得到 <spanclass="math display">\[\boxed{c_m=\frac{2}{N}\sum_{k=0}^{N-1}f\left[\cos((k+\frac{1}{2})\pi/N)\right]\cos((k+\frac{1}{2})m\pi/N)}\]</span> 这就是 Chebyshev 展开的系数计算公式.</p><p>这里给出 Chebyshev 展开在 Runge 现象中的应用, 它的各个基之间是正交的,而幂级数的基之间具有很大的overlap, 所以前者才能解决所谓的 Runge现象.</p><img src="/2024/03/Tue%20Mar%2012%202024%2020:55:33%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9AChebyshev%20%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%BF%91%E4%BC%BC/chebyshev_expansion_of_runge_function.png" class="" title="Runge 函数的 Chebyshev 展开">]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数的数值计算问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算物理</tag>
      
      <tag>数值计算</tag>
      
      <tag>Chebyshev 多项式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数的数值计算问题：Clenshaw 逆向迭代, Padé 近似</title>
    <link href="/2024/03/Tue%20Mar%2012%202024%2020:55:33%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9AClenshaw%20%E9%80%86%E5%90%91%E8%BF%AD%E4%BB%A3,%20Pad%C3%A9%20%E8%BF%91%E4%BC%BC"/>
    <url>/2024/03/Tue%20Mar%2012%202024%2020:55:33%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9AClenshaw%20%E9%80%86%E5%90%91%E8%BF%AD%E4%BB%A3,%20Pad%C3%A9%20%E8%BF%91%E4%BC%BC</url>
    
    <content type="html"><![CDATA[<h2 id="clenshaw-逆向迭代">Clenshaw 逆向迭代</h2><p>真正用类似的展开来算目标函数值的时候, 我们可以采用 Clenshaw提出的逆向迭代的算法. 先回顾对一个函数展开的近似方案.</p><p>首先有一个可展开的函数<span class="math inline">\(f(x)\)</span>,以及一个基<spanclass="math inline">\(\{P_i(x)\}\)</span>(不一定要求正交归一),对于无穷维的基, 在<span class="math inline">\(i=N\)</span>处截断,用部分的基函数来近似描述<span class="math inline">\(f(x)\)</span>: <spanclass="math display">\[f(x)\approx S_N(x)=\sum_{k=0}^Nc_kP_k(x)\]</span> 基函数具有一个至多二阶的递推关系: <spanclass="math display">\[P_{k+1}(x)=\alpha_k(x)P_k(x)+\beta_k(x)P_{k-1}(x)\]</span> 现在, 假设我们已经得知<spanclass="math inline">\(\{c_i\}\)</span>, 目的是计算部分和函数<spanclass="math inline">\(S_N(x)\)</span>,这个计算可以通过构造新的函数进行.</p><h3 id="构造新函数">构造新函数</h3><p>我们引入一类新的函数<span class="math inline">\(\{b_i(x)\}\)</span>,并且规定 <span class="math display">\[b_{N+1}=b_{N+2}=0\]</span> 递推关系规定为 <span class="math display">\[b_k(x)=c_k+\alpha_k(x)b_{k+1}(x)+\beta_{k+1}(x)b_{k+2}(x)\]</span></p><h3 id="重新计算部分和函数">重新计算部分和函数</h3><p>我们顺势将部分和函数中的<spanclass="math inline">\(\{c_i\}\)</span>​全部替换, 分裂为三个和: <spanclass="math display">\[S_N(x)=\sum_{k=0}^Nb_k(x)P_k(x)-\sum_{k=0}^N\alpha_k(x)b_{k+1}(x)P_k(x)-\sum_{k=0}^N\beta_{k+1}(x)b_{k+2}(x)P_k(x)\]</span> 基函数<spanclass="math inline">\(\{P_i(x)\}\)</span>同样具有递推关系: <spanclass="math display">\[\begin{aligned}\beta_{k+1}(x)P_k(x)&amp;=P_{k+2}(x)-\alpha_{k+1}(x)P_{k+1}(x)\newline&amp;\Downarrow\newline\sum_{k=0}^N\beta_{k+1}(x)b_{k+2}(x)P_k(x)&amp;=\sum_{k=0}^Nb_{k+2}(x)P_{k+2}(x)-\sum_{k=0}^N\alpha_{k+1}(x)b_{k+2}(x)P_{k+1}(x)\newline&amp;=\sum_{k=2}^Nb_{k}(x)P_{k}(x)-\sum_{k=1}^N\alpha_{k}(x)b_{k+1}(x)P_{k}(x)\end{aligned}\]</span> 代回部分和函数, 得到 <span class="math display">\[S_N(x)=b_0(x)P_0(x)+b_1(x)P_1(x)-\alpha_0(x)b_1(x)P_0(x)\]</span> 我们通常不使用<spanclass="math inline">\(b_0(x)\)</span>(这样就可以少迭代一阶了),而是考虑<spanclass="math inline">\(b_0(x)=c_0+\alpha_0(x)b_1(x)+\beta_1(x)b_2(x)\)</span>,得到 <span class="math display">\[\boxed{S_N(x)=c_0P_0(x)+b_1(x)P_1(x)+\beta_1(x)b_2(x)P_2(x)}\label{eq1}\]</span></p><h3 id="方法总结">方法总结</h3><p>所谓 <strong>Clenshaw 逆向迭代法</strong>, 就是已知:</p><ol type="1"><li><p>一个基<span class="math inline">\(\{P_i(x)\}\)</span>​,以及它的递推关系 <span class="math display">\[P_{k+1}(x)=\alpha_k(x)P_k(x)+\beta_k(x)P_{k-1}(x)\]</span></p></li><li><p>一个原函数<span class="math inline">\(f(x)\)</span>,以及它基于某种方案在基<spanclass="math inline">\(\{P_i(x)\}\)</span>​上的有限维近似展开(前文多次称为<strong>部分和函数</strong>)的系数<spanclass="math inline">\(\{c_i\}\)</span> <span class="math display">\[f(x)\approx\sum_{k=0}^Nc_kP_k(x)\]</span></p></li></ol><p>于是构造新函数 <span class="math display">\[b_k(x)=c_k+\alpha_k(x)b_{k+1}(x)+\beta_{k+1}(x)b_{k+2}(x)\newlineb_{N+1}=b_{N+2}=0\]</span> 从而把<spanclass="math inline">\(N\)</span>项的求和化简为少数几项和, 如<spanclass="math inline">\(\eqref{eq1}\)</span>: <spanclass="math display">\[S_N(x)=c_0P_0(x)+b_1(x)P_1(x)+\beta_1(x)b_2(x)P_2(x)\]</span> 因为计算新函数<spanclass="math inline">\(\{b_i(x)\}\)</span>​时, 指标从大到小递推,因此得名为"逆向迭代法".</p><p>经过反向递推, 我们把一个多项的求和式通过递推关系变成了少量几项的求和,这一优点有些时候可以改进求和计算的收敛性和稳定性.</p><h2 id="padé-近似">Padé 近似</h2><p>还有一个常用的近似计算函数的方法是 Padé 近似,也是当作级数展开的补充方法来用. 因为计算很多高阶的级数展开并不容易, Padé近似相当于算了一些阶的级数展开以后来获得更精确结果的方法.</p><p>Padé 近似函数是一个分式函数的形式 <span class="math display">\[R(x)=\frac{\displaystyle\sum_{k=0}^Ma_kx^k}{1+\displaystyle\sum_{k=1}^Nb_kx^k}\]</span> 我们希望它在展开点(例如<spanclass="math inline">\(x=0\)</span>)处与函数相等至<spanclass="math inline">\(M+N\)</span>阶导数: <span class="math display">\[R^{(k)}(0)=c_k\newline(k=0,1,\cdots,M+N)\]</span> 并称它为函数的 <strong><spanclass="math inline">\((M,N)\)</span>阶 Padé 近似</strong>. 其中, <spanclass="math inline">\(c_k=f^{(k)}(0)\)</span>, 或者说<spanclass="math inline">\(f(x)\)</span>的幂级数为<spanclass="math inline">\(\displaystyle\sum_{k=0}^\inftyc_kx^k\)</span>.</p><p>分式函数求导或许比较繁琐, 我们退而求其次, 令<spanclass="math inline">\(R(x)=\displaystyle\sum_{k=0}^\inftyc_kx^k\)</span>, 并把分母乘到等式另一边, 再考虑各阶导数. 特别是<spanclass="math inline">\(M=N\)</span>的情形, 得到 <spanclass="math display">\[\begin{aligned}\sum_{m=1}^Nc_{N-m+k}b_m&amp;=-c_{N+k}\newlinea_k&amp;=\sum_{m=0}^kc_{k-m}b_m\newline(k&amp;=1,\cdots,N)\end{aligned}\label{eq2}\]</span> <spanclass="math inline">\(\eqref{eq2}\)</span>上式是一个<spanclass="math inline">\(N\)</span>元线性方程组, 可解出<spanclass="math inline">\(\{b_i\}\)</span>, 再代入<spanclass="math inline">\(\eqref{eq2}\)</span>下式, 计算出<spanclass="math inline">\(\{a_i\}\)</span>. 显然, 我们需要在知道<spanclass="math inline">\(\{c_i\}_{0\sim2N}\)</span>的前提下进行求解.</p>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数的数值计算问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算物理</tag>
      
      <tag>数值计算</tag>
      
      <tag>Clenshaw 逆向迭代</tag>
      
      <tag>Padé近似</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数的数值计算问题：有理函数内插与样条函数插值法</title>
    <link href="/2024/02/Thu%20Feb%2029%202024%2016:30:30%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9A%E6%9C%89%E7%90%86%E5%87%BD%E6%95%B0%E5%86%85%E6%8F%92%E4%B8%8E%E6%A0%B7%E6%9D%A1%E5%87%BD%E6%95%B0%E6%8F%92%E5%80%BC%E6%B3%95"/>
    <url>/2024/02/Thu%20Feb%2029%202024%2016:30:30%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9A%E6%9C%89%E7%90%86%E5%87%BD%E6%95%B0%E5%86%85%E6%8F%92%E4%B8%8E%E6%A0%B7%E6%9D%A1%E5%87%BD%E6%95%B0%E6%8F%92%E5%80%BC%E6%B3%95</url>
    
    <content type="html"><![CDATA[<h2 id="有理函数内插">有理函数内插</h2><p><a href="./函数的数值计算问题：多项式内插.md">上篇笔记</a>提到,当函数在某个区间内的变化行为比较剧烈时, 多项式内插会出现剧烈震荡的行为.这时候利用有理函数进行内插可能会更加合适一些,它的构造可以采用一个分式的形式:</p><p><span class="math display">\[\Phi_{n,n}(x)=\frac{P_n(x)}{Q_n(x)}\]</span></p><p>其中<span class="math inline">\(P_n\)</span>和<spanclass="math inline">\(Q_n\)</span>都是<spanclass="math inline">\(n\)</span>阶多项式, 并且它们互素.</p><p>想要完全确定两者, 需要<spanclass="math inline">\(2n+2\)</span>个支撑点, 但是在<spanclass="math inline">\(\Phi_{n,n}\)</span>中, 两者相除,实际上造成了一个自由的公倍数, 也就是只需要<spanclass="math inline">\(2n+1\)</span>个支撑点, 记为<spanclass="math inline">\((x_0,y_0),(x_1,y_1),\cdots,(x_{2n},y_{2n})\)</span>.作为内插函数, <spanclass="math inline">\(\Phi_{n,n}\)</span>需要通过所有的支撑点,可以写成如下形式:</p><p><span class="math display">\[\Phi_{n,n}(x)=\phi_0(x_0)+\frac{x-x_0}{\Phi_{n-1,n-1}(x)}\]</span></p><p>其中, <spanclass="math inline">\(\phi_0(x_0)=y_0\)</span>以通过支撑点<spanclass="math inline">\(0\)</span>. 分母又可以写为:</p><p><span class="math display">\[\Phi_{n-1,n-1}(x)=\phi_1(x_0,x_1)+\frac{x-x_1}{\Phi_{n-2,n-2}(x)}\]</span></p><p>这样, <spanclass="math inline">\(\phi_1(x_0,x_1)\)</span>必须满足</p><p><span class="math display">\[\phi_0(x_0)+\frac{x_1-x_0}{\phi_1(x_0,x_1)}=y_1\Rightarrow\phi_1=\frac{x_1-x_0}{y_1-\phi_0(x_0)}\]</span></p><p>为了形式对称性, 把<span class="math inline">\(y_1\)</span>改写为<spanclass="math inline">\(\phi_0(x_1)\)</span>, 则</p><p><span class="math display">\[\phi_1(x_0,x_1)=\frac{x_1-x_0}{\phi_0(x_1)-\phi_0(x_0)}\]</span></p><p>对于更一般的情况, 我们不妨倒转递推方向</p><p><span class="math display">\[\Phi_{n-j-1,n-j-1}(x)=\frac{x-x_j}{\Phi_{n-j,n-j}(x)-\phi_j(x_0,x_1,\cdots,x_j)}\]</span></p><p>令<span class="math inline">\(x=x_{j+1}\)</span>, 立即得到</p><p><span class="math display">\[\phi_{j+1}(x_0, x_1, \cdots,x_{j+1})=\frac{x_{j+1}-x_{j}}{\phi_j(x_0,x_1,\cdots,x_{j-1},x_{j+1})-\phi_j(x_0,x_1,\cdots,x_{j-1},x_{j}}\]</span></p><p>它给出了各阶<span class="math inline">\(\phi\)</span>函数的递推关系.而<span class="math inline">\(\Phi_{n,n}\)</span>写成连分数的形式:</p><p><span class="math display">\[\Phi_{n,n}(x)=\phi_0(x_0)+\frac{x-x_0}{\phi_1(x_0,x_1)+\displaystyle\frac{x-x_1}{\phi_2(x_0,x_1,x_2)+\displaystyle\frac{x-x_2}{\ddots+\displaystyle\frac{x-x_{2n-1}}{\phi_{2n}(x_0,\cdots,x_{2n})}}}}\]</span></p><p>如果我们在一个单调的区间插值, 那么上述构造不会发散. 特别是对于 Runge函数这种有理分式, 把<span class="math inline">\(x^2\)</span>看作自变量,只需构造<spanclass="math inline">\(\Phi_{1,1}\)</span>形式的有理内插函数,取三个支撑点就能完成内插, 并且和原函数一模一样, 所谓的 Runge现象自然也就不再出现.</p><h2 id="样条函数插值">样条函数插值</h2><p>样条函数的基本思想是在每两个支撑点之间用一段多项式函数来表示,最常用的是三次样条函数, 这里也仅介绍三次样条函数.</p><h3 id="基本准备">基本准备</h3><p>在区间<span class="math inline">\([a,b]\)</span>上包括两端一共有<spanclass="math inline">\(n+1\)</span>个支撑点: <spanclass="math inline">\((x_0,y_0),(x_1,y_1),\cdots,(x_n,y_n)\)</span>.样条函数记作<span class="math inline">\(S(x), x\in[a,b]\)</span>.</p><p>每个子区间都具有一个三次多项式作为样条函数, 也就是<spanclass="math inline">\(4n\)</span>个待定参数. 可用的方程又有多少个呢?</p><ul><li><p>每个内部支撑点限制左右两个子区间的函数值, 给出两个方程,而外部两个支撑点各自只给出一个限制, 一共<spanclass="math inline">\(2n\)</span>个方程;</p></li><li><p>每个内部支撑点限制左右导函数相等, 一共<spanclass="math inline">\(n-1\)</span>个方程;</p></li><li><p>每个内部支撑点限制左右二阶导数相等, 一共<spanclass="math inline">\(n-1\)</span>个方程.</p></li></ul><p>我们现在有<span class="math inline">\(4n-2\)</span>个限制条件可用,得到的样条函数具有<span class="math inline">\(2\)</span>个自由度.自由度的来源无非是端点处边界条件不够完备, 我们只知道边界处的函数值,不知道边界处的导函数或者是二阶导函数的取值,因此需要再引入两个独立的约束方程,具体形式可以研究问题的数学或物理性质得到.</p><h3 id="计算参数">计算参数</h3><p>定义二阶导数在各个支撑点处的取值为 <strong>矩</strong>:</p><p><span class="math display">\[M_j=S&#39;&#39;(x_j)\ ,\ j =0,1,\cdots,n\]</span></p><p>三次多项式的二阶导数是一次函数, 因而对于每一段<spanclass="math inline">\([x_j,x_{j+1}], \ j=0,1,\cdots,n-1\)</span>,不难写出<span class="math inline">\(S&#39;&#39;\)</span>的表达式</p><p><span class="math display">\[S&#39;&#39;(x)=\frac{M_j(x_{j+1}-x)+M_{j+1}(x-x_j)}{x_{j+1}-x_j}\]</span></p><p>连续两次积分, 得到</p><p><span class="math display">\[S(x)=\frac{M_j(x_{j+1}-x)^3}{6(x_{j+1}-x_j)}+\frac{M_{j+1}(x-x_j)^3}{6(x_{j+1}-x_j)}+A_j(x-x_j)+B_j\, x\in[x_j,x_{j+1}]\]</span></p><p>这里<span class="math inline">\(A, B, M\)</span>一共是<spanclass="math inline">\(3n+1\)</span>个参数<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="为什么不是 $4n$ 个? 因为提前使用了二阶导连续的条件, 消去了 $n-1$ 个系数">[1]</span></a></sup>,考虑<span class="math inline">\(x_j\)</span>处函数值连续, 有</p><p><span class="math display">\[\frac{M_j(x_{j+1}-x_j)^2}{6}+B_j=\frac{M_j(x_{j}-x_{j-1})^2}{6}+A_{j-1}(x_j-x_{j-1})+B_{j-1}=y_j\]</span></p><p>得到</p><p><span class="math display">\[\boxed{\begin{aligned}B_j&amp;=y_j-\frac{M_j(x_{j+1}-x_j)^2}{6}\newlineA_j&amp;=\frac{y_{j+1}-y_j}{x_{j+1}-x_j}-\frac{M_{j+1}-M_j}{6}(x_{j+1}-x_j)\end{aligned}}\]</span></p><p>现在只剩<span class="math inline">\(n+1\)</span>个待定参数了, 同样地,内部限制条件只有<spanclass="math inline">\(n-1\)</span>个支撑点处的导数连续.</p><p><span class="math display">\[S&#39;(x)=-\frac{M_j(x_{j+1}-x)^2}{2(x_{j+1}-x_j)}+\frac{M_{j+1}(x-x_j)^2}{2(x_{j+1}-x_j)}+A_j\, x\in[x_j,x_{j+1}]\]</span></p><p>考虑<span class="math inline">\(x_j\)</span>处的导函数连续, 有</p><p><span class="math display">\[-\frac{M_j(x_{j+1}-x_j)}{2}+A_j=\frac{M_j(x_j-x_{j-1})}{2}+A_{j-1}\]</span></p><p>代入整理, 最终得到</p><p><span class="math display">\[\boxed{    \frac{x_{j+1}-x_j}{6}M_{j+1}+\frac{x_{j+1}-x_j}{3}M_j+\frac{x_j-x_{j-1}}{6}M_{j-1}=\frac{y_{j+1}-y_j}{x_{j+1}-x_j}-\frac{y_j-y_{j-1}}{x_j-x_{j-1}}}\]</span></p><p>这些式子给出全部的支撑点的约束方程,只要再给边界上<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="事实上可以是任两个无关且独立于之前所有约束方程的方程即可, 但实际问题中常常更容易得知边界处的条件">[2]</span></a></sup>引入两个独立约束即可.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>为什么不是 <spanclass="math inline">(4n)</span> 个? 因为提前使用了二阶导连续的条件,消去了 <span class="math inline">(n-1)</span> 个系数<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>事实上可以是任两个无关且独立于之前所有约束方程的方程即可,但实际问题中常常更容易得知边界处的条件<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数的数值计算问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算物理</tag>
      
      <tag>数值计算</tag>
      
      <tag>内插法</tag>
      
      <tag>有理函数内插法</tag>
      
      <tag>样条函数插值法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数的数值计算问题：多项式内插</title>
    <link href="/2024/02/Wed%20Feb%2028%202024%2023:11:18%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%86%85%E6%8F%92"/>
    <url>/2024/02/Wed%20Feb%2028%202024%2023:11:18%20GMT+0800/%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%86%85%E6%8F%92</url>
    
    <content type="html"><![CDATA[<p>作为计算物理的开篇, 先介绍几类常见的多项式内插方法,最后描述一种奇异的现象表明多项式插值的局限性.</p><h2 id="lagrange">Lagrange</h2><p>考虑区间<spanclass="math inline">\([x_0,x_n]\)</span>上的n次多项式内插</p><p><span class="math display">\[P_n(x)=a_0+a_1x+\cdots+a_nx^n\]</span></p><p>已知的点为<spanclass="math inline">\((x_0,y_0),(x_1,y_1),\cdots,(x_n,y_n)\)</span>.内插要求多项式的曲线通过这些点:</p><p><span class="math display">\[P_n(x_j)=y_j\ ,\ j = 0, 1, \cdots, n\]</span></p><p>为了求出这个问题的一般解, 我们将<spanclass="math inline">\(P_n\)</span>写成多项式的和:</p><p><span class="math display">\[P_n(x) = \sum_jp_{nj}(x)\]</span></p><p>其中, <spanclass="math inline">\(p_{nj}(x_k)=y_j\delta_{jk}\)</span>.</p><p>由于<span class="math inline">\(p_{nj}\)</span>具有<spanclass="math inline">\(n\)</span>个零点, 故它必然能写成</p><p><span class="math display">\[p_{nj}(x)=a_{nj}\prod_{m=0且m\ne j}^{n}(x-x_m)\]</span></p><p><span class="math inline">\(a_{nj}\)</span>只是系数, 因为<spanclass="math inline">\(n\)</span>个零点已经构成了<spanclass="math inline">\(n\)</span>次多项式. 代入<spanclass="math inline">\((x_j, y_j)\)</span>得到</p><p><span class="math display">\[a_{nj}=\frac{y_j}{\prod_{m=0且m\ne j}^{n}(x_j-x_m)}\]</span></p><p>最终我们得到</p><p><span class="math display">\[\boxed{P_n(x)=\sum_jy_jL_j(x)}\newline \ \newline\text{其中, } \boxed{L_j(x)=\prod_{m\ne j}\frac{x-x_m}{x_j-x_m}}\]</span></p><p>这个结果被称作 <strong>Larange多项式</strong>, 也称<strong>Lagrange内插公式</strong>.</p><h2 id="newton">Newton</h2><p>Newton 的多项式内插法是一种递推方法:</p><p><span class="math display">\[N(x)=\sum_{j=0}^{n}a_jn_j(x)\newline\text{其中, }n_j(x)=\prod_{k=0}^{j-1}(x-x_k),\ n_0(x)=1\]</span></p><p>好处是如果增加一个支撑点, 不破坏之前所有支撑条件, 仅需计算<spanclass="math inline">\(a_{n+1}\)</span>和<spanclass="math inline">\(n_{n+1}(x)\)</span>​:</p><p><span class="math display">\[a_0+\sum_{j=1}^{n+1}a_j\cdot\prod_{k=0}^{j-1}(x_{n+1}-x_k) = y_{n+1}\]</span></p><p>如何求解系数呢? 上式相当于一个方程组</p><p><span class="math display">\[\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; \cdots &amp; 0\\1 &amp; x_1-x_0 &amp; 0 &amp; \cdots &amp; 0\\1 &amp; x_2-x_0 &amp; (x_2-x_0)(x_2-x_1) &amp; \cdots &amp; 0\\\cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; 0\\1 &amp; x_n-x_0 &amp; (x_n-x_0)(x_n-x_1) &amp; \cdots &amp;\prod_{j=0}^{n-1}(x_n-x_j)\end{pmatrix}\begin{pmatrix}a_0 \\ a_1 \\ a_2 \\ \cdots \\ a_n\end{pmatrix}=\begin{pmatrix}y_0 \\ y_1 \\ y_2 \\ \cdots \\ y_n\end{pmatrix}\]</span></p><p>解这个下三角矩阵描述的线性方程组问题, 即得各项系数.</p><h2 id="neville">Neville</h2><p>先构造<span class="math inline">\(n+1\)</span>个常数函数:</p><p><span class="math display">\[Q_i(x)=y_i\]</span></p><p>按指标大小顺序排列<span class="math inline">\(Q_i\)</span>,再用每对相邻的函数构造更高阶函数, 并且用双下标做记号:</p><p><span class="math display">\[P_{ij}=\frac{(x-x_i)Q_j-(x-x_j)Q_i}{x_j-x_i}\]</span></p><p>现在得到<span class="math inline">\(n\)</span>个双下标的一次函数,按第一指标顺序排列, 再用相邻的函数对构造二次函数:</p><p><span class="math display">\[P_{ijk}=\frac{(x-x_i)P_{jk}-(x-x_k)P_{ij}}{x_k-x_i}\]</span></p><p>至于下标, 略去重复数字, 为三下标. 如法炮制, 最终得到单个<spanclass="math inline">\(n\)</span>次函数.</p><h2 id="runge-现象">Runge 现象</h2><p>一般情况下, 多项式的次数越多, 需要的数据就越多, 而预测也就越准确.但也存在插值次数越高, 插值结果越偏离原函数的现象,特别常发生在区间的端点处, 称为 <strong>Runge现象</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="关于 Runge 现象的定性介绍, 可以参见[它的维基百科](https://zh.wikipedia.org/wiki/龙格现象).">[1]</span></a></sup>.</p><p>特别地, 考虑函数</p><p><span class="math display">\[f(x)=\frac{1}{1+25x^2}\]</span></p><p>称为 <strong>Runge 函数</strong>. 在区间<spanclass="math inline">\([-1, 1]\)</span>上, 以<spanclass="math inline">\(\frac{2}{n}\)</span>为步长选取支撑点进行 Lagrange插值, 得到的结果如下所示:</p><p><img title="Runge 现象" src=".\函数的数值计算问题：多项式内插\runge's_phenomenon.png" alt="Runge 现象" data-align="inline" width="662"></p><p>造成这种现象的主要原因是，拉格朗日插值使用的函数基组<spanclass="math inline">\(1,𝑥,𝑥^2,\cdots\)</span>并不是正交基,插值结果十分病态, 可以考虑对基函数进行 Schmidt 正交化,但更方便的方案是选取既正交又简单的非多项式基,或者干脆不使用这种内插方案, 这是<ahref=".\函数的数值计算问题：有理函数内插与样条函数插值法.md">下篇笔记</a>将要讨论到的.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>关于 Runge 现象的定性介绍,可以参见<ahref="https://zh.wikipedia.org/wiki/龙格现象">它的维基百科</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算物理</category>
      
      <category>函数的数值计算问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算物理</tag>
      
      <tag>数值计算</tag>
      
      <tag>内插法</tag>
      
      <tag>多项式插值</tag>
      
      <tag>Lagrange 插值法</tag>
      
      <tag>Newton 插值法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>声学基本原理：声的属性</title>
    <link href="/2024/01/Tue%20Jan%2016%202024%2021:57:48%20GMT+0800/%E5%A3%B0%E5%AD%A6%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%EF%BC%9A%E5%A3%B0%E7%9A%84%E5%B1%9E%E6%80%A7"/>
    <url>/2024/01/Tue%20Jan%2016%202024%2021:57:48%20GMT+0800/%E5%A3%B0%E5%AD%A6%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%EF%BC%9A%E5%A3%B0%E7%9A%84%E5%B1%9E%E6%80%A7</url>
    
    <content type="html"><![CDATA[<p><strong>声音 (sound)</strong> 是音乐的载体, 它是由振动产生的.物体振动引起周围空气的疏密变化, 形成声波. 声波是 <strong>纵波(longitudinal wave)</strong>, 即"质点振动方向与传播方向平行的波".</p><p>声音的四个物理属性:</p><ol type="1"><li><p>声音的高低是由 <strong>振动频率 (frequency)</strong> 决定的,对应于音乐中的 <strong>音高 (pitch)</strong>;</p></li><li><p>声音的强弱是由 <strong>振幅 (amplitude)</strong> 决定的,对应于音乐中的 <strong>力度 (dynamics)</strong>. 我们听到声音的<strong>响度 (loudness)</strong> 是由传入耳朵中的 <strong>声压</strong>决定的;</p></li><li><p>声音持续的 <strong>时间长度</strong>, 对应于音乐中的 <strong>时值(duration)</strong>;</p></li><li><p>不同声音的特点是由其 <strong>振动波形 (waveform)</strong> 决定的,对应于音乐中的 <strong>音色 (timbre)</strong>.</p></li></ol><h2 id="频率和振幅的描述">频率和振幅的描述</h2><h3 id="频率及其单位">频率及其单位</h3><p>频率的单位相当简单, 按照定义, 取单位时间内波峰/谷的数目即可,通常人耳能够听见的声音, 其振动频率范围为 20~20000 <strong>赫兹 (<spanclass="math inline">\(\rm{Hz},\1\rm{Hz}=1\rm{s}^{-1}\)</span>)</strong>.</p><h3 id="振幅及其单位">振幅及其单位</h3><p>声音振幅的标定稍显复杂. 前面提到, 声音是纵波, 是空气涨缩状态的传播.怎么描述这种波的振幅大小?可以选取声压<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="前面没有解释声压的概念, 声压是压强的扰动, 即波场中某处实际压强相比于平衡状态下大气压的偏差.">[1]</span></a></sup>来描述<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="显然, 这种描述不是唯一的. 作为一种涨缩的标量波, 可以采用密度的扰动描述; 考虑到物态, 甚至可以用摩尔内能和摩尔焓的扰动来描述, 而声压是得到普遍应用的描述对象.">[2]</span></a></sup>.在 MKS 单位制中, 压强的基本单位是 <strong>帕斯卡 (<spanclass="math inline">\(\rm{pascal},\)</span> <spanclass="math inline">\(\rm{Pa},\)</span> <spanclass="math inline">\(1\rm{Pa}=1\rm{kg}\cdot\rm{m}^{-1}\cdot\rm{s}^{-2}\)</span>)</strong>.</p><p>一般认为, 人类的听觉下限阈值为 <spanclass="math inline">\(20\mu\rm{Pa}\)</span> (<spanclass="math inline">\(\rm{1000Hz}\)</span> 时),而引发疼痛的阈值要高足足七个数量级, 可以引入对数标度来衡量, 即所谓<strong>声压水平 (sound pressure level, SPL)</strong>:</p><p><span class="math display">\[L_p=20\log_{10}\left(\frac{p}{p_0}\right)\]</span></p><p>其中, <span class="math inline">\(p_0\)</span>是前面提到的听觉下限阈值, 声压水平的单位为 <strong>分贝 (decibel,dB)</strong>.</p><blockquote><p>在物理学中, 人们常定义某种强度 (例如能流密度) 的水平:</p><p><span class="math display">\[L=\log_{10}\left(\frac{I}{I_0}\right)\]</span></p><p>强度正比于幅度的平方, 因此</p><p><span class="math display">\[L=2\log_{10}\left(\frac{p}{p_0}\right)\]</span></p><p>这样定义的强度水平单位为 <strong>贝尔 (bel, B)</strong>,有时候它又太大了, 人们便把一贝尔十等分为分贝, 这就是声压水平中系数"<spanclass="math inline">\(20\)</span>"的来历.</p></blockquote><h2 id="音色与波形">音色与波形</h2><p>不同的乐器演奏同一个音高时, 我们仍然可以辨别出它们发出的不同声响,这是因为不同的乐器具有各自不同的音色. 直观上,不同音色表现为不同的振动波形,波形可以Fourier分解为一系列频率振动的叠加.</p><p>我们可以在一张图上画出不同时间的谱, 例如, 横轴表示时间, 纵轴表示频率,用颜色 (或者亮度、灰度) 表示对应成分的强弱, 这样得到的图形称作<strong>频谱图 (spectrogram)</strong>.</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>前面没有解释声压的概念,声压是压强的扰动, 即波场中某处实际压强相比于平衡状态下大气压的偏差.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>显然, 这种描述不是唯一的.作为一种涨缩的标量波, 可以采用密度的扰动描述; 考虑到物态,甚至可以用摩尔内能和摩尔焓的扰动来描述, 而声压是得到普遍应用的描述对象.<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>音乐与数学</category>
      
      <category>声学基本原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音乐与数学</tag>
      
      <tag>声学基本原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
